{"$message_type":"diagnostic","message":"the trait bound `F: CanonicalSerialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/mixed_radix.rs","byte_start":1222,"byte_end":1240,"line_start":26,"line_end":26,"column_start":44,"column_end":62,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone, Hash, Eq, PartialEq, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":44,"highlight_end":62}],"label":"the trait `CanonicalSerialize` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/mixed_radix.rs","byte_start":1222,"byte_end":1240,"line_start":26,"line_end":26,"column_start":44,"column_end":62,"is_primary":false,"text":[{"text":"#[derive(Copy, Clone, Hash, Eq, PartialEq, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":44,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalSerialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":352,"byte_end":444,"line_start":19,"line_end":19,"column_start":1,"column_end":93,"is_primary":false,"text":[{"text":"pub fn derive_canonical_serialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider further restricting type parameter `F` with trait `CanonicalSerialize`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/mixed_radix.rs","byte_start":1314,"byte_end":1314,"line_start":27,"line_end":27,"column_start":50,"column_end":50,"is_primary":true,"text":[{"text":"pub struct MixedRadixEvaluationDomain<F: FftField> {","highlight_start":50,"highlight_end":50}],"label":null,"suggested_replacement":" + ark_serialize::CanonicalSerialize","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: CanonicalSerialize` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/mixed_radix.rs:26:44\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mHash, Eq, PartialEq, CanonicalSerialize, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `CanonicalSerialize` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalSerialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `CanonicalSerialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct MixedRadixEvaluationDomain<F: FftField\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::CanonicalSerialize\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: CanonicalDeserialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/mixed_radix.rs","byte_start":1242,"byte_end":1262,"line_start":26,"line_end":26,"column_start":64,"column_end":84,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone, Hash, Eq, PartialEq, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":64,"highlight_end":84}],"label":"the trait `CanonicalDeserialize` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/mixed_radix.rs","byte_start":1242,"byte_end":1262,"line_start":26,"line_end":26,"column_start":64,"column_end":84,"is_primary":false,"text":[{"text":"#[derive(Copy, Clone, Hash, Eq, PartialEq, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":64,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":615,"byte_end":709,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider further restricting type parameter `F` with trait `CanonicalDeserialize`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/mixed_radix.rs","byte_start":1314,"byte_end":1314,"line_start":27,"line_end":27,"column_start":50,"column_end":50,"is_primary":true,"text":[{"text":"pub struct MixedRadixEvaluationDomain<F: FftField> {","highlight_start":50,"highlight_end":50}],"label":null,"suggested_replacement":" + ark_serialize::CanonicalDeserialize","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: CanonicalDeserialize` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/mixed_radix.rs:26:64\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m CanonicalSerialize, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `CanonicalDeserialize` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `CanonicalDeserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct MixedRadixEvaluationDomain<F: FftField\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::CanonicalDeserialize\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: Valid` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/mixed_radix.rs","byte_start":1242,"byte_end":1262,"line_start":26,"line_end":26,"column_start":64,"column_end":84,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone, Hash, Eq, PartialEq, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":64,"highlight_end":84}],"label":"the trait `Valid` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/mixed_radix.rs","byte_start":1242,"byte_end":1262,"line_start":26,"line_end":26,"column_start":64,"column_end":84,"is_primary":false,"text":[{"text":"#[derive(Copy, Clone, Hash, Eq, PartialEq, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":64,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":615,"byte_end":709,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider further restricting type parameter `F` with trait `Valid`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/mixed_radix.rs","byte_start":1314,"byte_end":1314,"line_start":27,"line_end":27,"column_start":50,"column_end":50,"is_primary":true,"text":[{"text":"pub struct MixedRadixEvaluationDomain<F: FftField> {","highlight_start":50,"highlight_end":50}],"label":null,"suggested_replacement":" + ark_serialize::Valid","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: Valid` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/mixed_radix.rs:26:64\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0me, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Valid` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `Valid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct MixedRadixEvaluationDomain<F: FftField\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::Valid\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: CanonicalSerialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/radix2/mod.rs","byte_start":815,"byte_end":833,"line_start":20,"line_end":20,"column_start":44,"column_end":62,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone, Hash, Eq, PartialEq, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":44,"highlight_end":62}],"label":"the trait `CanonicalSerialize` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/radix2/mod.rs","byte_start":815,"byte_end":833,"line_start":20,"line_end":20,"column_start":44,"column_end":62,"is_primary":false,"text":[{"text":"#[derive(Copy, Clone, Hash, Eq, PartialEq, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":44,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalSerialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":352,"byte_end":444,"line_start":19,"line_end":19,"column_start":1,"column_end":93,"is_primary":false,"text":[{"text":"pub fn derive_canonical_serialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider further restricting type parameter `F` with trait `CanonicalSerialize`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/radix2/mod.rs","byte_start":903,"byte_end":903,"line_start":21,"line_end":21,"column_start":46,"column_end":46,"is_primary":true,"text":[{"text":"pub struct Radix2EvaluationDomain<F: FftField> {","highlight_start":46,"highlight_end":46}],"label":null,"suggested_replacement":" + ark_serialize::CanonicalSerialize","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: CanonicalSerialize` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/radix2/mod.rs:20:44\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mHash, Eq, PartialEq, CanonicalSerialize, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `CanonicalSerialize` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalSerialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `CanonicalSerialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct Radix2EvaluationDomain<F: FftField\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::CanonicalSerialize\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: CanonicalDeserialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/radix2/mod.rs","byte_start":835,"byte_end":855,"line_start":20,"line_end":20,"column_start":64,"column_end":84,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone, Hash, Eq, PartialEq, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":64,"highlight_end":84}],"label":"the trait `CanonicalDeserialize` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/radix2/mod.rs","byte_start":835,"byte_end":855,"line_start":20,"line_end":20,"column_start":64,"column_end":84,"is_primary":false,"text":[{"text":"#[derive(Copy, Clone, Hash, Eq, PartialEq, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":64,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":615,"byte_end":709,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider further restricting type parameter `F` with trait `CanonicalDeserialize`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/radix2/mod.rs","byte_start":903,"byte_end":903,"line_start":21,"line_end":21,"column_start":46,"column_end":46,"is_primary":true,"text":[{"text":"pub struct Radix2EvaluationDomain<F: FftField> {","highlight_start":46,"highlight_end":46}],"label":null,"suggested_replacement":" + ark_serialize::CanonicalDeserialize","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: CanonicalDeserialize` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/radix2/mod.rs:20:64\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m CanonicalSerialize, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `CanonicalDeserialize` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `CanonicalDeserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct Radix2EvaluationDomain<F: FftField\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::CanonicalDeserialize\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: Valid` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/radix2/mod.rs","byte_start":835,"byte_end":855,"line_start":20,"line_end":20,"column_start":64,"column_end":84,"is_primary":true,"text":[{"text":"#[derive(Copy, Clone, Hash, Eq, PartialEq, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":64,"highlight_end":84}],"label":"the trait `Valid` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/radix2/mod.rs","byte_start":835,"byte_end":855,"line_start":20,"line_end":20,"column_start":64,"column_end":84,"is_primary":false,"text":[{"text":"#[derive(Copy, Clone, Hash, Eq, PartialEq, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":64,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":615,"byte_end":709,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider further restricting type parameter `F` with trait `Valid`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/radix2/mod.rs","byte_start":903,"byte_end":903,"line_start":21,"line_end":21,"column_start":46,"column_end":46,"is_primary":true,"text":[{"text":"pub struct Radix2EvaluationDomain<F: FftField> {","highlight_start":46,"highlight_end":46}],"label":null,"suggested_replacement":" + ark_serialize::Valid","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: Valid` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/domain/radix2/mod.rs:20:64\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0me, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Valid` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `Valid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct Radix2EvaluationDomain<F: FftField\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::Valid\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: CanonicalSerialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/dense.rs","byte_start":635,"byte_end":653,"line_start":23,"line_end":23,"column_start":47,"column_end":65,"is_primary":true,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":47,"highlight_end":65}],"label":"the trait `CanonicalSerialize` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/dense.rs","byte_start":635,"byte_end":653,"line_start":23,"line_end":23,"column_start":47,"column_end":65,"is_primary":false,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":47,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalSerialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":352,"byte_end":444,"line_start":19,"line_end":19,"column_start":1,"column_end":93,"is_primary":false,"text":[{"text":"pub fn derive_canonical_serialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::vec::Vec<F>` to implement `CanonicalSerialize`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider further restricting type parameter `F` with trait `CanonicalSerialize`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/dense.rs","byte_start":723,"byte_end":723,"line_start":24,"line_end":24,"column_start":46,"column_end":46,"is_primary":true,"text":[{"text":"pub struct DenseMultilinearExtension<F: Field> {","highlight_start":46,"highlight_end":46}],"label":null,"suggested_replacement":" + ark_serialize::CanonicalSerialize","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: CanonicalSerialize` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/dense.rs:23:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `CanonicalSerialize` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::vec::Vec<F>` to implement `CanonicalSerialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalSerialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `CanonicalSerialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct DenseMultilinearExtension<F: Field\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::CanonicalSerialize\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: CanonicalDeserialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/dense.rs","byte_start":655,"byte_end":675,"line_start":23,"line_end":23,"column_start":67,"column_end":87,"is_primary":true,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":67,"highlight_end":87}],"label":"the trait `CanonicalDeserialize` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/dense.rs","byte_start":655,"byte_end":675,"line_start":23,"line_end":23,"column_start":67,"column_end":87,"is_primary":false,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":67,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":615,"byte_end":709,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::vec::Vec<F>` to implement `CanonicalDeserialize`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider further restricting type parameter `F` with trait `CanonicalDeserialize`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/dense.rs","byte_start":723,"byte_end":723,"line_start":24,"line_end":24,"column_start":46,"column_end":46,"is_primary":true,"text":[{"text":"pub struct DenseMultilinearExtension<F: Field> {","highlight_start":46,"highlight_end":46}],"label":null,"suggested_replacement":" + ark_serialize::CanonicalDeserialize","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: CanonicalDeserialize` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/dense.rs:23:67\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m CanonicalSerialize, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `CanonicalDeserialize` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::vec::Vec<F>` to implement `CanonicalDeserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `CanonicalDeserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct DenseMultilinearExtension<F: Field\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::CanonicalDeserialize\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: Valid` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/dense.rs","byte_start":655,"byte_end":675,"line_start":23,"line_end":23,"column_start":67,"column_end":87,"is_primary":true,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":67,"highlight_end":87}],"label":"the trait `Valid` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/dense.rs","byte_start":655,"byte_end":675,"line_start":23,"line_end":23,"column_start":67,"column_end":87,"is_primary":false,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":67,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":615,"byte_end":709,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::vec::Vec<F>` to implement `Valid`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider further restricting type parameter `F` with trait `Valid`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/dense.rs","byte_start":723,"byte_end":723,"line_start":24,"line_end":24,"column_start":46,"column_end":46,"is_primary":true,"text":[{"text":"pub struct DenseMultilinearExtension<F: Field> {","highlight_start":46,"highlight_end":46}],"label":null,"suggested_replacement":" + ark_serialize::Valid","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: Valid` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/dense.rs:23:67\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0me, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Valid` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::vec::Vec<F>` to implement `Valid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `Valid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct DenseMultilinearExtension<F: Field\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::Valid\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: CanonicalSerialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/sparse.rs","byte_start":688,"byte_end":706,"line_start":25,"line_end":25,"column_start":47,"column_end":65,"is_primary":true,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":47,"highlight_end":65}],"label":"the trait `CanonicalSerialize` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/sparse.rs","byte_start":688,"byte_end":706,"line_start":25,"line_end":25,"column_start":47,"column_end":65,"is_primary":false,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":47,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalSerialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":352,"byte_end":444,"line_start":19,"line_end":19,"column_start":1,"column_end":93,"is_primary":false,"text":[{"text":"pub fn derive_canonical_serialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `BTreeMap<usize, F>` to implement `CanonicalSerialize`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider further restricting type parameter `F` with trait `CanonicalSerialize`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/sparse.rs","byte_start":777,"byte_end":777,"line_start":26,"line_end":26,"column_start":47,"column_end":47,"is_primary":true,"text":[{"text":"pub struct SparseMultilinearExtension<F: Field> {","highlight_start":47,"highlight_end":47}],"label":null,"suggested_replacement":" + ark_serialize::CanonicalSerialize","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: CanonicalSerialize` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/sparse.rs:25:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `CanonicalSerialize` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `BTreeMap<usize, F>` to implement `CanonicalSerialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalSerialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `CanonicalSerialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct SparseMultilinearExtension<F: Field\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::CanonicalSerialize\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: CanonicalDeserialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/sparse.rs","byte_start":708,"byte_end":728,"line_start":25,"line_end":25,"column_start":67,"column_end":87,"is_primary":true,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":67,"highlight_end":87}],"label":"the trait `CanonicalDeserialize` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/sparse.rs","byte_start":708,"byte_end":728,"line_start":25,"line_end":25,"column_start":67,"column_end":87,"is_primary":false,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":67,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":615,"byte_end":709,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `BTreeMap<usize, F>` to implement `CanonicalDeserialize`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider further restricting type parameter `F` with trait `CanonicalDeserialize`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/sparse.rs","byte_start":777,"byte_end":777,"line_start":26,"line_end":26,"column_start":47,"column_end":47,"is_primary":true,"text":[{"text":"pub struct SparseMultilinearExtension<F: Field> {","highlight_start":47,"highlight_end":47}],"label":null,"suggested_replacement":" + ark_serialize::CanonicalDeserialize","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: CanonicalDeserialize` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/sparse.rs:25:67\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m CanonicalSerialize, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `CanonicalDeserialize` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `BTreeMap<usize, F>` to implement `CanonicalDeserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `CanonicalDeserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct SparseMultilinearExtension<F: Field\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::CanonicalDeserialize\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: Valid` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/sparse.rs","byte_start":708,"byte_end":728,"line_start":25,"line_end":25,"column_start":67,"column_end":87,"is_primary":true,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":67,"highlight_end":87}],"label":"the trait `Valid` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/sparse.rs","byte_start":708,"byte_end":728,"line_start":25,"line_end":25,"column_start":67,"column_end":87,"is_primary":false,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":67,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":615,"byte_end":709,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `BTreeMap<usize, F>` to implement `Valid`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider further restricting type parameter `F` with trait `Valid`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/sparse.rs","byte_start":777,"byte_end":777,"line_start":26,"line_end":26,"column_start":47,"column_end":47,"is_primary":true,"text":[{"text":"pub struct SparseMultilinearExtension<F: Field> {","highlight_start":47,"highlight_end":47}],"label":null,"suggested_replacement":" + ark_serialize::Valid","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: Valid` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/multivariate/multilinear/sparse.rs:25:67\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0me, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Valid` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `BTreeMap<usize, F>` to implement `Valid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `Valid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct SparseMultilinearExtension<F: Field\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::Valid\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: CanonicalSerialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/univariate/mod.rs","byte_start":534,"byte_end":552,"line_start":17,"line_end":17,"column_start":45,"column_end":63,"is_primary":true,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Debug, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":45,"highlight_end":63}],"label":"the trait `CanonicalSerialize` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/univariate/mod.rs","byte_start":534,"byte_end":552,"line_start":17,"line_end":17,"column_start":45,"column_end":63,"is_primary":false,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Debug, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":45,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalSerialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":352,"byte_end":444,"line_start":19,"line_end":19,"column_start":1,"column_end":93,"is_primary":false,"text":[{"text":"pub fn derive_canonical_serialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::vec::Vec<F>` to implement `CanonicalSerialize`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider further restricting type parameter `F` with trait `CanonicalSerialize`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/univariate/mod.rs","byte_start":611,"byte_end":611,"line_start":18,"line_end":18,"column_start":35,"column_end":35,"is_primary":true,"text":[{"text":"pub struct Evaluations<F: FftField, D: EvaluationDomain<F> = GeneralEvaluationDomain<F>> {","highlight_start":35,"highlight_end":35}],"label":null,"suggested_replacement":" + ark_serialize::CanonicalSerialize","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: CanonicalSerialize` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/univariate/mod.rs:17:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mEq, Eq, Hash, Debug, CanonicalSerialize, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `CanonicalSerialize` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::vec::Vec<F>` to implement `CanonicalSerialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalSerialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `CanonicalSerialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct Evaluations<F: FftField\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::CanonicalSerialize\u001b[0m\u001b[0m, D: EvaluationDomain<F> = GeneralEvaluationDomain<F>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: CanonicalDeserialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/univariate/mod.rs","byte_start":554,"byte_end":574,"line_start":17,"line_end":17,"column_start":65,"column_end":85,"is_primary":true,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Debug, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":65,"highlight_end":85}],"label":"the trait `CanonicalDeserialize` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/univariate/mod.rs","byte_start":554,"byte_end":574,"line_start":17,"line_end":17,"column_start":65,"column_end":85,"is_primary":false,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Debug, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":65,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":615,"byte_end":709,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::vec::Vec<F>` to implement `CanonicalDeserialize`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider further restricting type parameter `F` with trait `CanonicalDeserialize`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/univariate/mod.rs","byte_start":611,"byte_end":611,"line_start":18,"line_end":18,"column_start":35,"column_end":35,"is_primary":true,"text":[{"text":"pub struct Evaluations<F: FftField, D: EvaluationDomain<F> = GeneralEvaluationDomain<F>> {","highlight_start":35,"highlight_end":35}],"label":null,"suggested_replacement":" + ark_serialize::CanonicalDeserialize","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: CanonicalDeserialize` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/univariate/mod.rs:17:65\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m CanonicalSerialize, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `CanonicalDeserialize` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::vec::Vec<F>` to implement `CanonicalDeserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `CanonicalDeserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct Evaluations<F: FftField\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::CanonicalDeserialize\u001b[0m\u001b[0m, D: EvaluationDomain<F> = GeneralEvaluationDomain<F>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: Valid` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/univariate/mod.rs","byte_start":554,"byte_end":574,"line_start":17,"line_end":17,"column_start":65,"column_end":85,"is_primary":true,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Debug, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":65,"highlight_end":85}],"label":"the trait `Valid` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/univariate/mod.rs","byte_start":554,"byte_end":574,"line_start":17,"line_end":17,"column_start":65,"column_end":85,"is_primary":false,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Debug, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":65,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":615,"byte_end":709,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::vec::Vec<F>` to implement `Valid`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider further restricting type parameter `F` with trait `Valid`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/univariate/mod.rs","byte_start":611,"byte_end":611,"line_start":18,"line_end":18,"column_start":35,"column_end":35,"is_primary":true,"text":[{"text":"pub struct Evaluations<F: FftField, D: EvaluationDomain<F> = GeneralEvaluationDomain<F>> {","highlight_start":35,"highlight_end":35}],"label":null,"suggested_replacement":" + ark_serialize::Valid","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: Valid` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/evaluations/univariate/mod.rs:17:65\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0me, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Valid` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::vec::Vec<F>` to implement `Valid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `Valid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct Evaluations<F: FftField\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::Valid\u001b[0m\u001b[0m, D: EvaluationDomain<F> = GeneralEvaluationDomain<F>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: CanonicalSerialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/multivariate/sparse.rs","byte_start":505,"byte_end":523,"line_start":20,"line_end":20,"column_start":17,"column_end":35,"is_primary":true,"text":[{"text":"#[derive(Educe, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":17,"highlight_end":35}],"label":"the trait `CanonicalSerialize` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/multivariate/sparse.rs","byte_start":505,"byte_end":523,"line_start":20,"line_end":20,"column_start":17,"column_end":35,"is_primary":false,"text":[{"text":"#[derive(Educe, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":17,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalSerialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":352,"byte_end":444,"line_start":19,"line_end":19,"column_start":1,"column_end":93,"is_primary":false,"text":[{"text":"pub fn derive_canonical_serialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `(F, T)` to implement `CanonicalSerialize`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `std::vec::Vec<(F, T)>` to implement `CanonicalSerialize`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider further restricting type parameter `F` with trait `CanonicalSerialize`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/multivariate/sparse.rs","byte_start":630,"byte_end":630,"line_start":22,"line_end":22,"column_start":37,"column_end":37,"is_primary":true,"text":[{"text":"pub struct SparsePolynomial<F: Field, T: Term> {","highlight_start":37,"highlight_end":37}],"label":null,"suggested_replacement":" + ark_serialize::CanonicalSerialize","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: CanonicalSerialize` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/multivariate/sparse.rs:20:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Educe, CanonicalSerialize, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `CanonicalSerialize` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `(F, T)` to implement `CanonicalSerialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::vec::Vec<(F, T)>` to implement `CanonicalSerialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalSerialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `CanonicalSerialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct SparsePolynomial<F: Field\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::CanonicalSerialize\u001b[0m\u001b[0m, T: Term> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: CanonicalDeserialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/multivariate/sparse.rs","byte_start":525,"byte_end":545,"line_start":20,"line_end":20,"column_start":37,"column_end":57,"is_primary":true,"text":[{"text":"#[derive(Educe, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":37,"highlight_end":57}],"label":"the trait `CanonicalDeserialize` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/multivariate/sparse.rs","byte_start":525,"byte_end":545,"line_start":20,"line_end":20,"column_start":37,"column_end":57,"is_primary":false,"text":[{"text":"#[derive(Educe, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":37,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":615,"byte_end":709,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `(F, T)` to implement `CanonicalDeserialize`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `std::vec::Vec<(F, T)>` to implement `CanonicalDeserialize`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider further restricting type parameter `F` with trait `CanonicalDeserialize`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/multivariate/sparse.rs","byte_start":630,"byte_end":630,"line_start":22,"line_end":22,"column_start":37,"column_end":37,"is_primary":true,"text":[{"text":"pub struct SparsePolynomial<F: Field, T: Term> {","highlight_start":37,"highlight_end":37}],"label":null,"suggested_replacement":" + ark_serialize::CanonicalDeserialize","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: CanonicalDeserialize` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/multivariate/sparse.rs:20:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Educe, CanonicalSerialize, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `CanonicalDeserialize` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `(F, T)` to implement `CanonicalDeserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::vec::Vec<(F, T)>` to implement `CanonicalDeserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `CanonicalDeserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct SparsePolynomial<F: Field\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::CanonicalDeserialize\u001b[0m\u001b[0m, T: Term> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: Valid` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/multivariate/sparse.rs","byte_start":525,"byte_end":545,"line_start":20,"line_end":20,"column_start":37,"column_end":57,"is_primary":true,"text":[{"text":"#[derive(Educe, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":37,"highlight_end":57}],"label":"the trait `Valid` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/multivariate/sparse.rs","byte_start":525,"byte_end":545,"line_start":20,"line_end":20,"column_start":37,"column_end":57,"is_primary":false,"text":[{"text":"#[derive(Educe, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":37,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":615,"byte_end":709,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `(F, T)` to implement `Valid`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `std::vec::Vec<(F, T)>` to implement `Valid`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider further restricting type parameter `F` with trait `Valid`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/multivariate/sparse.rs","byte_start":630,"byte_end":630,"line_start":22,"line_end":22,"column_start":37,"column_end":37,"is_primary":true,"text":[{"text":"pub struct SparsePolynomial<F: Field, T: Term> {","highlight_start":37,"highlight_end":37}],"label":null,"suggested_replacement":" + ark_serialize::Valid","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: Valid` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/multivariate/sparse.rs:20:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Educe, CanonicalSerialize, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Valid` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `(F, T)` to implement `Valid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::vec::Vec<(F, T)>` to implement `Valid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `Valid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct SparsePolynomial<F: Field\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::Valid\u001b[0m\u001b[0m, T: Term> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: CanonicalSerialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/dense.rs","byte_start":661,"byte_end":679,"line_start":21,"line_end":21,"column_start":47,"column_end":65,"is_primary":true,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":47,"highlight_end":65}],"label":"the trait `CanonicalSerialize` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/dense.rs","byte_start":661,"byte_end":679,"line_start":21,"line_end":21,"column_start":47,"column_end":65,"is_primary":false,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":47,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalSerialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":352,"byte_end":444,"line_start":19,"line_end":19,"column_start":1,"column_end":93,"is_primary":false,"text":[{"text":"pub fn derive_canonical_serialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::vec::Vec<F>` to implement `CanonicalSerialize`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider further restricting type parameter `F` with trait `CanonicalSerialize`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/dense.rs","byte_start":739,"byte_end":739,"line_start":22,"line_end":22,"column_start":36,"column_end":36,"is_primary":true,"text":[{"text":"pub struct DensePolynomial<F: Field> {","highlight_start":36,"highlight_end":36}],"label":null,"suggested_replacement":" + ark_serialize::CanonicalSerialize","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: CanonicalSerialize` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/dense.rs:21:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `CanonicalSerialize` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::vec::Vec<F>` to implement `CanonicalSerialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalSerialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `CanonicalSerialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct DensePolynomial<F: Field\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::CanonicalSerialize\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: CanonicalDeserialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/dense.rs","byte_start":681,"byte_end":701,"line_start":21,"line_end":21,"column_start":67,"column_end":87,"is_primary":true,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":67,"highlight_end":87}],"label":"the trait `CanonicalDeserialize` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/dense.rs","byte_start":681,"byte_end":701,"line_start":21,"line_end":21,"column_start":67,"column_end":87,"is_primary":false,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":67,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":615,"byte_end":709,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::vec::Vec<F>` to implement `CanonicalDeserialize`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider further restricting type parameter `F` with trait `CanonicalDeserialize`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/dense.rs","byte_start":739,"byte_end":739,"line_start":22,"line_end":22,"column_start":36,"column_end":36,"is_primary":true,"text":[{"text":"pub struct DensePolynomial<F: Field> {","highlight_start":36,"highlight_end":36}],"label":null,"suggested_replacement":" + ark_serialize::CanonicalDeserialize","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: CanonicalDeserialize` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/dense.rs:21:67\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m CanonicalSerialize, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `CanonicalDeserialize` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::vec::Vec<F>` to implement `CanonicalDeserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `CanonicalDeserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct DensePolynomial<F: Field\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::CanonicalDeserialize\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: Valid` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/dense.rs","byte_start":681,"byte_end":701,"line_start":21,"line_end":21,"column_start":67,"column_end":87,"is_primary":true,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":67,"highlight_end":87}],"label":"the trait `Valid` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/dense.rs","byte_start":681,"byte_end":701,"line_start":21,"line_end":21,"column_start":67,"column_end":87,"is_primary":false,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":67,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":615,"byte_end":709,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::vec::Vec<F>` to implement `Valid`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider further restricting type parameter `F` with trait `Valid`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/dense.rs","byte_start":739,"byte_end":739,"line_start":22,"line_end":22,"column_start":36,"column_end":36,"is_primary":true,"text":[{"text":"pub struct DensePolynomial<F: Field> {","highlight_start":36,"highlight_end":36}],"label":null,"suggested_replacement":" + ark_serialize::Valid","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: Valid` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/dense.rs:21:67\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0me, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Valid` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::vec::Vec<F>` to implement `Valid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `Valid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct DensePolynomial<F: Field\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::Valid\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: CanonicalSerialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/sparse.rs","byte_start":598,"byte_end":616,"line_start":20,"line_end":20,"column_start":47,"column_end":65,"is_primary":true,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":47,"highlight_end":65}],"label":"the trait `CanonicalSerialize` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/sparse.rs","byte_start":598,"byte_end":616,"line_start":20,"line_end":20,"column_start":47,"column_end":65,"is_primary":false,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":47,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalSerialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":352,"byte_end":444,"line_start":19,"line_end":19,"column_start":1,"column_end":93,"is_primary":false,"text":[{"text":"pub fn derive_canonical_serialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `(usize, F)` to implement `CanonicalSerialize`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `std::vec::Vec<(usize, F)>` to implement `CanonicalSerialize`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider further restricting type parameter `F` with trait `CanonicalSerialize`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/sparse.rs","byte_start":677,"byte_end":677,"line_start":21,"line_end":21,"column_start":37,"column_end":37,"is_primary":true,"text":[{"text":"pub struct SparsePolynomial<F: Field> {","highlight_start":37,"highlight_end":37}],"label":null,"suggested_replacement":" + ark_serialize::CanonicalSerialize","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: CanonicalSerialize` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/sparse.rs:20:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `CanonicalSerialize` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `(usize, F)` to implement `CanonicalSerialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::vec::Vec<(usize, F)>` to implement `CanonicalSerialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalSerialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `CanonicalSerialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct SparsePolynomial<F: Field\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::CanonicalSerialize\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: CanonicalDeserialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/sparse.rs","byte_start":618,"byte_end":638,"line_start":20,"line_end":20,"column_start":67,"column_end":87,"is_primary":true,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":67,"highlight_end":87}],"label":"the trait `CanonicalDeserialize` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/sparse.rs","byte_start":618,"byte_end":638,"line_start":20,"line_end":20,"column_start":67,"column_end":87,"is_primary":false,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":67,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":615,"byte_end":709,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `(usize, F)` to implement `CanonicalDeserialize`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `std::vec::Vec<(usize, F)>` to implement `CanonicalDeserialize`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider further restricting type parameter `F` with trait `CanonicalDeserialize`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/sparse.rs","byte_start":677,"byte_end":677,"line_start":21,"line_end":21,"column_start":37,"column_end":37,"is_primary":true,"text":[{"text":"pub struct SparsePolynomial<F: Field> {","highlight_start":37,"highlight_end":37}],"label":null,"suggested_replacement":" + ark_serialize::CanonicalDeserialize","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: CanonicalDeserialize` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/sparse.rs:20:67\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m CanonicalSerialize, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `CanonicalDeserialize` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `(usize, F)` to implement `CanonicalDeserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::vec::Vec<(usize, F)>` to implement `CanonicalDeserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `CanonicalDeserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct SparsePolynomial<F: Field\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::CanonicalDeserialize\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `F: Valid` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/sparse.rs","byte_start":618,"byte_end":638,"line_start":20,"line_end":20,"column_start":67,"column_end":87,"is_primary":true,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":67,"highlight_end":87}],"label":"the trait `Valid` is not implemented for `F`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/sparse.rs","byte_start":618,"byte_end":638,"line_start":20,"line_end":20,"column_start":67,"column_end":87,"is_primary":false,"text":[{"text":"#[derive(Clone, PartialEq, Eq, Hash, Default, CanonicalSerialize, CanonicalDeserialize)]","highlight_start":67,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.5.0/src/lib.rs","byte_start":615,"byte_end":709,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `(usize, F)` to implement `Valid`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `std::vec::Vec<(usize, F)>` to implement `Valid`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider further restricting type parameter `F` with trait `Valid`","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/sparse.rs","byte_start":677,"byte_end":677,"line_start":21,"line_end":21,"column_start":37,"column_end":37,"is_primary":true,"text":[{"text":"pub struct SparsePolynomial<F: Field> {","highlight_start":37,"highlight_end":37}],"label":null,"suggested_replacement":" + ark_serialize::Valid","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `F: Valid` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-poly-0.5.0/src/polynomial/univariate/sparse.rs:20:67\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0me, CanonicalDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Valid` is not implemented for `F`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `(usize, F)` to implement `Valid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::vec::Vec<(usize, F)>` to implement `Valid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `F` with trait `Valid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct SparsePolynomial<F: Field\u001b[0m\u001b[0m\u001b[38;5;10m + ark_serialize::Valid\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 24 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 24 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
