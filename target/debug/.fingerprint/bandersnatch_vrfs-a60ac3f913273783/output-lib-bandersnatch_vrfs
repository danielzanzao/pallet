{"$message_type":"diagnostic","message":"struct takes 4 generic arguments but 3 generic arguments were supplied","code":{"code":"E0107","explanation":"An incorrect number of generic arguments was provided.\n\nErroneous code example:\n\n```compile_fail,E0107\nstruct Foo<T> { x: T }\n\nstruct Bar { x: Foo }             // error: wrong number of type arguments:\n                                  //        expected 1, found 0\nstruct Baz<S, T> { x: Foo<S, T> } // error: wrong number of type arguments:\n                                  //        expected 1, found 2\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool>(x);                 // error: wrong number of type arguments:\n                                    //        expected 2, found 1\n    foo::<bool, i32, i32>(x, 2, 4); // error: wrong number of type arguments:\n                                    //        expected 2, found 3\n    f::<'static>();                 // error: wrong number of lifetime arguments\n                                    //        expected 0, found 1\n}\n```\n\nWhen using/declaring an item with generic arguments, you must provide the exact\nsame number:\n\n```\nstruct Foo<T> { x: T }\n\nstruct Bar<T> { x: Foo<T> }               // ok!\nstruct Baz<S, T> { x: Foo<S>, y: Foo<T> } // ok!\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool, u32>(x, 12);              // ok!\n    f();                                  // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":659,"byte_end":669,"line_start":25,"line_end":25,"column_start":42,"column_end":52,"is_primary":true,"text":[{"text":"pub type RingProver = ring::ring_prover::RingProver<Fq, RealKZG, SWConfig>;","highlight_start":42,"highlight_end":52}],"label":"expected 4 generic arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":670,"byte_end":672,"line_start":25,"line_end":25,"column_start":53,"column_end":55,"is_primary":false,"text":[{"text":"pub type RingProver = ring::ring_prover::RingProver<Fq, RealKZG, SWConfig>;","highlight_start":53,"highlight_end":55}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":674,"byte_end":681,"line_start":25,"line_end":25,"column_start":57,"column_end":64,"is_primary":false,"text":[{"text":"pub type RingProver = ring::ring_prover::RingProver<Fq, RealKZG, SWConfig>;","highlight_start":57,"highlight_end":64}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":683,"byte_end":691,"line_start":25,"line_end":25,"column_start":66,"column_end":74,"is_primary":false,"text":[{"text":"pub type RingProver = ring::ring_prover::RingProver<Fq, RealKZG, SWConfig>;","highlight_start":66,"highlight_end":74}],"label":"supplied 3 generic arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"struct defined here, with 4 generic parameters: `F`, `CS`, `Curve`, `T`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs","byte_start":316,"byte_end":317,"line_start":12,"line_end":12,"column_start":23,"column_end":24,"is_primary":false,"text":[{"text":"pub struct RingProver<F, CS, Curve, T>","highlight_start":23,"highlight_end":24}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs","byte_start":319,"byte_end":321,"line_start":12,"line_end":12,"column_start":26,"column_end":28,"is_primary":false,"text":[{"text":"pub struct RingProver<F, CS, Curve, T>","highlight_start":26,"highlight_end":28}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs","byte_start":323,"byte_end":328,"line_start":12,"line_end":12,"column_start":30,"column_end":35,"is_primary":false,"text":[{"text":"pub struct RingProver<F, CS, Curve, T>","highlight_start":30,"highlight_end":35}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs","byte_start":330,"byte_end":331,"line_start":12,"line_end":12,"column_start":37,"column_end":38,"is_primary":false,"text":[{"text":"pub struct RingProver<F, CS, Curve, T>","highlight_start":37,"highlight_end":38}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs","byte_start":305,"byte_end":315,"line_start":12,"line_end":12,"column_start":12,"column_end":22,"is_primary":true,"text":[{"text":"pub struct RingProver<F, CS, Curve, T>","highlight_start":12,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"add missing generic argument","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":691,"byte_end":691,"line_start":25,"line_end":25,"column_start":74,"column_end":74,"is_primary":true,"text":[{"text":"pub type RingProver = ring::ring_prover::RingProver<Fq, RealKZG, SWConfig>;","highlight_start":74,"highlight_end":74}],"label":null,"suggested_replacement":", T","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0107]\u001b[0m\u001b[0m\u001b[1m: struct takes 4 generic arguments but 3 generic arguments were supplied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:25:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub type RingProver = ring::ring_prover::RingProver<Fq, RealKZG, SWConfig>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 3 generic arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 4 generic arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: struct defined here, with 4 generic parameters: `F`, `CS`, `Curve`, `T`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs:12:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingProver<F, CS, Curve, T>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add missing generic argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub type RingProver = ring::ring_prover::RingProver<Fq, RealKZG, SWConfig\u001b[0m\u001b[0m\u001b[38;5;10m, T\u001b[0m\u001b[0m>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[38;5;10m+++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"struct takes 4 generic arguments but 3 generic arguments were supplied","code":{"code":"E0107","explanation":"An incorrect number of generic arguments was provided.\n\nErroneous code example:\n\n```compile_fail,E0107\nstruct Foo<T> { x: T }\n\nstruct Bar { x: Foo }             // error: wrong number of type arguments:\n                                  //        expected 1, found 0\nstruct Baz<S, T> { x: Foo<S, T> } // error: wrong number of type arguments:\n                                  //        expected 1, found 2\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool>(x);                 // error: wrong number of type arguments:\n                                    //        expected 2, found 1\n    foo::<bool, i32, i32>(x, 2, 4); // error: wrong number of type arguments:\n                                    //        expected 2, found 3\n    f::<'static>();                 // error: wrong number of lifetime arguments\n                                    //        expected 0, found 1\n}\n```\n\nWhen using/declaring an item with generic arguments, you must provide the exact\nsame number:\n\n```\nstruct Foo<T> { x: T }\n\nstruct Bar<T> { x: Foo<T> }               // ok!\nstruct Baz<S, T> { x: Foo<S>, y: Foo<T> } // ok!\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool, u32>(x, 12);              // ok!\n    f();                                  // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":739,"byte_end":751,"line_start":26,"line_end":26,"column_start":46,"column_end":58,"is_primary":true,"text":[{"text":"pub type RingVerifier = ring::ring_verifier::RingVerifier<Fq, RealKZG, SWConfig>;","highlight_start":46,"highlight_end":58}],"label":"expected 4 generic arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":752,"byte_end":754,"line_start":26,"line_end":26,"column_start":59,"column_end":61,"is_primary":false,"text":[{"text":"pub type RingVerifier = ring::ring_verifier::RingVerifier<Fq, RealKZG, SWConfig>;","highlight_start":59,"highlight_end":61}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":756,"byte_end":763,"line_start":26,"line_end":26,"column_start":63,"column_end":70,"is_primary":false,"text":[{"text":"pub type RingVerifier = ring::ring_verifier::RingVerifier<Fq, RealKZG, SWConfig>;","highlight_start":63,"highlight_end":70}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":765,"byte_end":773,"line_start":26,"line_end":26,"column_start":72,"column_end":80,"is_primary":false,"text":[{"text":"pub type RingVerifier = ring::ring_verifier::RingVerifier<Fq, RealKZG, SWConfig>;","highlight_start":72,"highlight_end":80}],"label":"supplied 3 generic arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"struct defined here, with 4 generic parameters: `F`, `CS`, `Curve`, `T`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs","byte_start":446,"byte_end":447,"line_start":15,"line_end":15,"column_start":25,"column_end":26,"is_primary":false,"text":[{"text":"pub struct RingVerifier<F, CS, Curve, T>","highlight_start":25,"highlight_end":26}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs","byte_start":449,"byte_end":451,"line_start":15,"line_end":15,"column_start":28,"column_end":30,"is_primary":false,"text":[{"text":"pub struct RingVerifier<F, CS, Curve, T>","highlight_start":28,"highlight_end":30}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs","byte_start":453,"byte_end":458,"line_start":15,"line_end":15,"column_start":32,"column_end":37,"is_primary":false,"text":[{"text":"pub struct RingVerifier<F, CS, Curve, T>","highlight_start":32,"highlight_end":37}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs","byte_start":460,"byte_end":461,"line_start":15,"line_end":15,"column_start":39,"column_end":40,"is_primary":false,"text":[{"text":"pub struct RingVerifier<F, CS, Curve, T>","highlight_start":39,"highlight_end":40}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs","byte_start":433,"byte_end":445,"line_start":15,"line_end":15,"column_start":12,"column_end":24,"is_primary":true,"text":[{"text":"pub struct RingVerifier<F, CS, Curve, T>","highlight_start":12,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"add missing generic argument","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":773,"byte_end":773,"line_start":26,"line_end":26,"column_start":80,"column_end":80,"is_primary":true,"text":[{"text":"pub type RingVerifier = ring::ring_verifier::RingVerifier<Fq, RealKZG, SWConfig>;","highlight_start":80,"highlight_end":80}],"label":null,"suggested_replacement":", T","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0107]\u001b[0m\u001b[0m\u001b[1m: struct takes 4 generic arguments but 3 generic arguments were supplied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:26:46\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mer::RingVerifier<Fq, RealKZG, SWConfig>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 3 generic arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 4 generic arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: struct defined here, with 4 generic parameters: `F`, `CS`, `Curve`, `T`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs:15:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingVerifier<F, CS, Curve, T>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add missing generic argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub type RingVerifier = ring::ring_verifier::RingVerifier<Fq, RealKZG, SWConfig\u001b[0m\u001b[0m\u001b[38;5;10m, T\u001b[0m\u001b[0m>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                \u001b[0m\u001b[0m\u001b[38;5;10m+++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5961,"byte_end":5970,"line_start":194,"line_end":194,"column_start":21,"column_end":30,"is_primary":true,"text":[{"text":"    pub ring_proof: RingProof,","highlight_start":21,"highlight_end":30}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:194:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub ring_proof: RingProof,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5961,"byte_end":5970,"line_start":194,"line_end":194,"column_start":21,"column_end":30,"is_primary":true,"text":[{"text":"    pub ring_proof: RingProof,","highlight_start":21,"highlight_end":30}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":1},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":1},{"text":"    + FftField","highlight_start":1,"highlight_end":1},{"text":"    + FromStr","highlight_start":1,"highlight_end":1},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":1},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":1},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":1},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":1},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":1},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":1},{"text":"    + Copy","highlight_start":1,"highlight_end":1},{"text":"    + Clone","highlight_start":1,"highlight_end":1},{"text":"    + Debug","highlight_start":1,"highlight_end":1},{"text":"    + Default","highlight_start":1,"highlight_end":1},{"text":"    + Display","highlight_start":1,"highlight_end":1},{"text":"    + Eq","highlight_start":1,"highlight_end":1},{"text":"    + Ord","highlight_start":1,"highlight_end":1},{"text":"    + Send","highlight_start":1,"highlight_end":1},{"text":"    + Sized","highlight_start":1,"highlight_end":1},{"text":"    + Sync","highlight_start":1,"highlight_end":1},{"text":"    + 'static","highlight_start":1,"highlight_end":1},{"text":"    + UniformRand","highlight_start":1,"highlight_end":1},{"text":"    + Zeroize","highlight_start":1,"highlight_end":1},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":1},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":1},{"text":"    + From<u64>","highlight_start":1,"highlight_end":1},{"text":"    + From<u32>","highlight_start":1,"highlight_end":1},{"text":"    + From<u16>","highlight_start":1,"highlight_end":1},{"text":"    + From<u8>","highlight_start":1,"highlight_end":1},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":1},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `common::Proof`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/common/src/lib.rs","byte_start":2193,"byte_end":2198,"line_start":80,"line_end":80,"column_start":12,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Proof<F, CS, Commitments, Evaluations>","highlight_start":12,"highlight_end":17}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/common/src/lib.rs","byte_start":2245,"byte_end":2255,"line_start":82,"line_end":82,"column_start":8,"column_end":18,"is_primary":true,"text":[{"text":"    F: PrimeField,","highlight_start":8,"highlight_end":18}],"label":"required by this bound in `Proof`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:194:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub ring_proof: RingProof,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `common::Proof`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/common/src/lib.rs:82:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Proof<F, CS, Commitments, Evaluations>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    F: PrimeField,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Proof`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5817,"byte_end":5849,"line_start":191,"line_end":191,"column_start":12,"column_end":44,"is_primary":true,"text":[{"text":"pub struct RingVrfSignature<const N: usize> {","highlight_start":12,"highlight_end":44}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because it appears within the type `RingVrfSignature<N>`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5817,"byte_end":5833,"line_start":191,"line_end":191,"column_start":12,"column_end":28,"is_primary":true,"text":[{"text":"pub struct RingVrfSignature<const N: usize> {","highlight_start":12,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required for `RingVrfSignature<N>` to implement `Valid`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `CanonicalDeserialize`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs","byte_start":3351,"byte_end":3356,"line_start":126,"line_end":126,"column_start":33,"column_end":38,"is_primary":true,"text":[{"text":"pub trait CanonicalDeserialize: Valid {","highlight_start":33,"highlight_end":38}],"label":"required by this bound in `CanonicalDeserialize`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:191:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingVrfSignature<const N: usize> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `RingVrfSignature<N>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:191:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingVrfSignature<const N: usize> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `RingVrfSignature<N>` to implement `Valid`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `CanonicalDeserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs:126:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait CanonicalDeserialize: Valid {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `CanonicalDeserialize`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5817,"byte_end":5849,"line_start":191,"line_end":191,"column_start":12,"column_end":44,"is_primary":true,"text":[{"text":"pub struct RingVrfSignature<const N: usize> {","highlight_start":12,"highlight_end":44}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because it appears within the type `RingVrfSignature<N>`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5817,"byte_end":5833,"line_start":191,"line_end":191,"column_start":12,"column_end":28,"is_primary":true,"text":[{"text":"pub struct RingVrfSignature<const N: usize> {","highlight_start":12,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `Valid`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs","byte_start":1053,"byte_end":1057,"line_start":43,"line_end":43,"column_start":26,"column_end":30,"is_primary":true,"text":[{"text":"pub trait Valid: Sized + Sync {","highlight_start":26,"highlight_end":30}],"label":"required by this bound in `Valid`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:191:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingVrfSignature<const N: usize> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `RingVrfSignature<N>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:191:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingVrfSignature<const N: usize> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Valid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs:43:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Valid: Sized + Sync {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Valid`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":3985,"byte_end":3995,"line_start":132,"line_end":132,"column_start":23,"column_end":33,"is_primary":true,"text":[{"text":"        ring_prover: &RingProver","highlight_start":23,"highlight_end":33}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::ring_prover::RingProver`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs","byte_start":305,"byte_end":315,"line_start":12,"line_end":12,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"pub struct RingProver<F, CS, Curve, T>","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs","byte_start":346,"byte_end":356,"line_start":14,"line_end":14,"column_start":8,"column_end":18,"is_primary":true,"text":[{"text":"    F: PrimeField,","highlight_start":8,"highlight_end":18}],"label":"required by this bound in `RingProver`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:132:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ring_prover: &RingProver\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::ring_prover::RingProver`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs:14:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingProver<F, CS, Curve, T>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    F: PrimeField,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RingProver`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":3985,"byte_end":3995,"line_start":132,"line_end":132,"column_start":23,"column_end":33,"is_primary":true,"text":[{"text":"        ring_prover: &RingProver","highlight_start":23,"highlight_end":33}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs","byte_start":817,"byte_end":860,"line_start":29,"line_end":29,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub trait SWCurveConfig: super::CurveConfig {","highlight_start":1,"highlight_end":44}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::ring_prover::RingProver`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs","byte_start":305,"byte_end":315,"line_start":12,"line_end":12,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"pub struct RingProver<F, CS, Curve, T>","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs","byte_start":385,"byte_end":413,"line_start":16,"line_end":16,"column_start":12,"column_end":40,"is_primary":true,"text":[{"text":"    Curve: SWCurveConfig<BaseField = F>,","highlight_start":12,"highlight_end":40}],"label":"required by this bound in `RingProver`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:132:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ring_prover: &RingProver\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs:29:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SWCurveConfig: super::CurveConfig {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::ring_prover::RingProver`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs:16:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingProver<F, CS, Curve, T>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Curve: SWCurveConfig<BaseField = F>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RingProver`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":3985,"byte_end":3995,"line_start":132,"line_end":132,"column_start":23,"column_end":33,"is_primary":true,"text":[{"text":"        ring_prover: &RingProver","highlight_start":23,"highlight_end":33}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `fflonk::pcs::kzg::KZG`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs","byte_start":651,"byte_end":658,"line_start":24,"line_end":24,"column_start":19,"column_end":26,"is_primary":true,"text":[{"text":"pub struct KZG<E: Pairing> {","highlight_start":19,"highlight_end":26}],"label":"required by this bound in `KZG`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:132:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ring_prover: &RingProver\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `fflonk::pcs::kzg::KZG`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs:24:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct KZG<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `KZG`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5783,"byte_end":5803,"line_start":190,"line_end":190,"column_start":29,"column_end":49,"is_primary":true,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":29,"highlight_end":49}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5783,"byte_end":5803,"line_start":190,"line_end":190,"column_start":29,"column_end":49,"is_primary":false,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":29,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.4.2/src/lib.rs","byte_start":567,"byte_end":661,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because it appears within the type `RingVrfSignature<N>`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5817,"byte_end":5833,"line_start":191,"line_end":191,"column_start":12,"column_end":28,"is_primary":true,"text":[{"text":"pub struct RingVrfSignature<const N: usize> {","highlight_start":12,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by an implicit `Sized` bound in `Result`","code":null,"level":"note","spans":[{"file_name":"/rustc/5bc62314547c7639484481f62f218156697cfef0/library/core/src/result.rs","byte_start":19597,"byte_end":19618,"line_start":528,"line_end":528,"column_start":1,"column_end":22,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:190:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(CanonicalSerialize,CanonicalDeserialize)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `RingVrfSignature<N>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:191:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingVrfSignature<const N: usize> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by an implicit `Sized` bound in `Result`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/rustc/5bc62314547c7639484481f62f218156697cfef0/library/core/src/result.rs:528:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":6143,"byte_end":6155,"line_start":203,"line_end":203,"column_start":25,"column_end":37,"is_primary":true,"text":[{"text":"        ring_verifier: &RingVerifier,","highlight_start":25,"highlight_end":37}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::ring_verifier::RingVerifier`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs","byte_start":433,"byte_end":445,"line_start":15,"line_end":15,"column_start":12,"column_end":24,"is_primary":false,"text":[{"text":"pub struct RingVerifier<F, CS, Curve, T>","highlight_start":12,"highlight_end":24}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs","byte_start":476,"byte_end":486,"line_start":17,"line_end":17,"column_start":8,"column_end":18,"is_primary":true,"text":[{"text":"    F: PrimeField,","highlight_start":8,"highlight_end":18}],"label":"required by this bound in `RingVerifier`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:203:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m203\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ring_verifier: &RingVerifier,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::ring_verifier::RingVerifier`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs:17:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingVerifier<F, CS, Curve, T>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    F: PrimeField,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RingVerifier`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":6143,"byte_end":6155,"line_start":203,"line_end":203,"column_start":25,"column_end":37,"is_primary":true,"text":[{"text":"        ring_verifier: &RingVerifier,","highlight_start":25,"highlight_end":37}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs","byte_start":817,"byte_end":860,"line_start":29,"line_end":29,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub trait SWCurveConfig: super::CurveConfig {","highlight_start":1,"highlight_end":44}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::ring_verifier::RingVerifier`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs","byte_start":433,"byte_end":445,"line_start":15,"line_end":15,"column_start":12,"column_end":24,"is_primary":false,"text":[{"text":"pub struct RingVerifier<F, CS, Curve, T>","highlight_start":12,"highlight_end":24}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs","byte_start":515,"byte_end":543,"line_start":19,"line_end":19,"column_start":12,"column_end":40,"is_primary":true,"text":[{"text":"    Curve: SWCurveConfig<BaseField = F>,","highlight_start":12,"highlight_end":40}],"label":"required by this bound in `RingVerifier`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:203:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m203\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ring_verifier: &RingVerifier,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs:29:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SWCurveConfig: super::CurveConfig {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::ring_verifier::RingVerifier`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs:19:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingVerifier<F, CS, Curve, T>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Curve: SWCurveConfig<BaseField = F>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RingVerifier`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":6143,"byte_end":6155,"line_start":203,"line_end":203,"column_start":25,"column_end":37,"is_primary":true,"text":[{"text":"        ring_verifier: &RingVerifier,","highlight_start":25,"highlight_end":37}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `fflonk::pcs::kzg::KZG`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs","byte_start":651,"byte_end":658,"line_start":24,"line_end":24,"column_start":19,"column_end":26,"is_primary":true,"text":[{"text":"pub struct KZG<E: Pairing> {","highlight_start":19,"highlight_end":26}],"label":"required by this bound in `KZG`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:203:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m203\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ring_verifier: &RingVerifier,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `fflonk::pcs::kzg::KZG`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs:24:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct KZG<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `KZG`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":953,"byte_end":963,"line_start":31,"line_end":31,"column_start":60,"column_end":70,"is_primary":true,"text":[{"text":"fn make_piop_params(seed: [u8; 32], domain_size: usize) -> PiopParams {","highlight_start":60,"highlight_end":70}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::PiopParams`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs","byte_start":329,"byte_end":339,"line_start":12,"line_end":12,"column_start":26,"column_end":36,"is_primary":true,"text":[{"text":"pub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {","highlight_start":26,"highlight_end":36}],"label":"required by this bound in `PiopParams`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:31:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn make_piop_params(seed: [u8; 32], domain_size: usize) -> PiopParams {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::PiopParams`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs:12:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `PiopParams`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":953,"byte_end":963,"line_start":31,"line_end":31,"column_start":60,"column_end":70,"is_primary":true,"text":[{"text":"fn make_piop_params(seed: [u8; 32], domain_size: usize) -> PiopParams {","highlight_start":60,"highlight_end":70}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs","byte_start":817,"byte_end":860,"line_start":29,"line_end":29,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub trait SWCurveConfig: super::CurveConfig {","highlight_start":1,"highlight_end":44}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::PiopParams`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs","byte_start":348,"byte_end":376,"line_start":12,"line_end":12,"column_start":45,"column_end":73,"is_primary":true,"text":[{"text":"pub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {","highlight_start":45,"highlight_end":73}],"label":"required by this bound in `PiopParams`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:31:60\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn make_piop_params(seed: [u8; 32], domain_size: usize) -> PiopParams {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs:29:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SWCurveConfig: super::CurveConfig {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::PiopParams`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs:12:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `PiopParams`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1220,"byte_end":1230,"line_start":41,"line_end":41,"column_start":18,"column_end":28,"is_primary":true,"text":[{"text":"    piop_params: PiopParams,","highlight_start":18,"highlight_end":28}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::PiopParams`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs","byte_start":329,"byte_end":339,"line_start":12,"line_end":12,"column_start":26,"column_end":36,"is_primary":true,"text":[{"text":"pub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {","highlight_start":26,"highlight_end":36}],"label":"required by this bound in `PiopParams`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:41:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    piop_params: PiopParams,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::PiopParams`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs:12:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `PiopParams`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1220,"byte_end":1230,"line_start":41,"line_end":41,"column_start":18,"column_end":28,"is_primary":true,"text":[{"text":"    piop_params: PiopParams,","highlight_start":18,"highlight_end":28}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs","byte_start":817,"byte_end":860,"line_start":29,"line_end":29,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub trait SWCurveConfig: super::CurveConfig {","highlight_start":1,"highlight_end":44}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::PiopParams`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs","byte_start":348,"byte_end":376,"line_start":12,"line_end":12,"column_start":45,"column_end":73,"is_primary":true,"text":[{"text":"pub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {","highlight_start":45,"highlight_end":73}],"label":"required by this bound in `PiopParams`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:41:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    piop_params: PiopParams,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs:29:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SWCurveConfig: super::CurveConfig {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::PiopParams`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs:12:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `PiopParams`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1248,"byte_end":1257,"line_start":42,"line_end":42,"column_start":17,"column_end":26,"is_primary":true,"text":[{"text":"    pcs_params: PcsParams,","highlight_start":17,"highlight_end":26}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `URS`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs","byte_start":369,"byte_end":376,"line_start":14,"line_end":14,"column_start":19,"column_end":26,"is_primary":true,"text":[{"text":"pub struct URS<E: Pairing> {","highlight_start":19,"highlight_end":26}],"label":"required by this bound in `URS`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:42:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pcs_params: PcsParams,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `URS`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs:14:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct URS<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `URS`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied in `ring::KZG`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":3872,"byte_end":3875,"line_start":121,"line_end":121,"column_start":31,"column_end":34,"is_primary":true,"text":[{"text":"impl CanonicalDeserialize for KZG {","highlight_start":31,"highlight_end":34}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"within `ring::KZG`, the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because it appears within the type `URS<Bls12<ark_bls12_381::Config>>`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs","byte_start":362,"byte_end":365,"line_start":14,"line_end":14,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"pub struct URS<E: Pairing> {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it appears within the type `ring::KZG`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1155,"byte_end":1158,"line_start":38,"line_end":38,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"pub struct KZG {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required for `ring::KZG` to implement `Valid`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `CanonicalDeserialize`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs","byte_start":3351,"byte_end":3356,"line_start":126,"line_end":126,"column_start":33,"column_end":38,"is_primary":true,"text":[{"text":"pub trait CanonicalDeserialize: Valid {","highlight_start":33,"highlight_end":38}],"label":"required by this bound in `CanonicalDeserialize`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied in `ring::KZG`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:121:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl CanonicalDeserialize for KZG {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: within `ring::KZG`, the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `URS<Bls12<ark_bls12_381::Config>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs:14:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct URS<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `ring::KZG`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:38:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct KZG {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ring::KZG` to implement `Valid`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `CanonicalDeserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs:126:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait CanonicalDeserialize: Valid {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `CanonicalDeserialize`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BandersnatchConfig: ark_ec::models::CurveConfig` is not satisfied in `ring::KZG`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":3872,"byte_end":3875,"line_start":121,"line_end":121,"column_start":31,"column_end":34,"is_primary":true,"text":[{"text":"impl CanonicalDeserialize for KZG {","highlight_start":31,"highlight_end":34}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"within `ring::KZG`, the trait `ark_ec::models::CurveConfig` is not implemented for `BandersnatchConfig`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/mod.rs","byte_start":505,"byte_end":557,"line_start":18,"line_end":18,"column_start":1,"column_end":53,"is_primary":true,"text":[{"text":"pub trait CurveConfig: Send + Sync + Sized + 'static {","highlight_start":1,"highlight_end":53}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because it appears within the type `Affine<BandersnatchConfig>`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/affine.rs","byte_start":786,"byte_end":792,"line_start":30,"line_end":30,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"pub struct Affine<P: SWCurveConfig> {","highlight_start":12,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it appears within the type `PiopParams<Fp<..., 4>, ...>`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs","byte_start":315,"byte_end":325,"line_start":12,"line_end":12,"column_start":12,"column_end":22,"is_primary":true,"text":[{"text":"pub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {","highlight_start":12,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it appears within the type `ring::KZG`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1155,"byte_end":1158,"line_start":38,"line_end":38,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"pub struct KZG {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required for `ring::KZG` to implement `Valid`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `CanonicalDeserialize`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs","byte_start":3351,"byte_end":3356,"line_start":126,"line_end":126,"column_start":33,"column_end":38,"is_primary":true,"text":[{"text":"pub trait CanonicalDeserialize: Valid {","highlight_start":33,"highlight_end":38}],"label":"required by this bound in `CanonicalDeserialize`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-17509108526647100689.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BandersnatchConfig: ark_ec::models::CurveConfig` is not satisfied in `ring::KZG`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:121:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl CanonicalDeserialize for KZG {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: within `ring::KZG`, the trait `ark_ec::models::CurveConfig` is not implemented for `BandersnatchConfig`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/mod.rs:18:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait CurveConfig: Send + Sync + Sized + 'static {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `Affine<BandersnatchConfig>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/affine.rs:30:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Affine<P: SWCurveConfig> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `PiopParams<Fp<..., 4>, ...>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs:12:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `ring::KZG`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:38:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct KZG {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ring::KZG` to implement `Valid`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `CanonicalDeserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs:126:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait CanonicalDeserialize: Valid {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `CanonicalDeserialize`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-17509108526647100689.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied in `ring::KZG`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":4568,"byte_end":4571,"line_start":141,"line_end":141,"column_start":16,"column_end":19,"is_primary":true,"text":[{"text":"impl Valid for KZG {","highlight_start":16,"highlight_end":19}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"within `ring::KZG`, the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because it appears within the type `URS<Bls12<ark_bls12_381::Config>>`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs","byte_start":362,"byte_end":365,"line_start":14,"line_end":14,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"pub struct URS<E: Pairing> {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it appears within the type `ring::KZG`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1155,"byte_end":1158,"line_start":38,"line_end":38,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"pub struct KZG {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `Valid`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs","byte_start":1053,"byte_end":1057,"line_start":43,"line_end":43,"column_start":26,"column_end":30,"is_primary":true,"text":[{"text":"pub trait Valid: Sized + Sync {","highlight_start":26,"highlight_end":30}],"label":"required by this bound in `Valid`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied in `ring::KZG`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:141:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl Valid for KZG {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: within `ring::KZG`, the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `URS<Bls12<ark_bls12_381::Config>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs:14:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct URS<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `ring::KZG`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:38:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct KZG {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Valid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs:43:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Valid: Sized + Sync {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Valid`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BandersnatchConfig: ark_ec::models::CurveConfig` is not satisfied in `ring::KZG`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":4568,"byte_end":4571,"line_start":141,"line_end":141,"column_start":16,"column_end":19,"is_primary":true,"text":[{"text":"impl Valid for KZG {","highlight_start":16,"highlight_end":19}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"within `ring::KZG`, the trait `ark_ec::models::CurveConfig` is not implemented for `BandersnatchConfig`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/mod.rs","byte_start":505,"byte_end":557,"line_start":18,"line_end":18,"column_start":1,"column_end":53,"is_primary":true,"text":[{"text":"pub trait CurveConfig: Send + Sync + Sized + 'static {","highlight_start":1,"highlight_end":53}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because it appears within the type `Affine<BandersnatchConfig>`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/affine.rs","byte_start":786,"byte_end":792,"line_start":30,"line_end":30,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"pub struct Affine<P: SWCurveConfig> {","highlight_start":12,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it appears within the type `PiopParams<Fp<..., 4>, ...>`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs","byte_start":315,"byte_end":325,"line_start":12,"line_end":12,"column_start":12,"column_end":22,"is_primary":true,"text":[{"text":"pub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {","highlight_start":12,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it appears within the type `ring::KZG`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1155,"byte_end":1158,"line_start":38,"line_end":38,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"pub struct KZG {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `Valid`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs","byte_start":1053,"byte_end":1057,"line_start":43,"line_end":43,"column_start":26,"column_end":30,"is_primary":true,"text":[{"text":"pub trait Valid: Sized + Sync {","highlight_start":26,"highlight_end":30}],"label":"required by this bound in `Valid`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-17509108526647100689.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BandersnatchConfig: ark_ec::models::CurveConfig` is not satisfied in `ring::KZG`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:141:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl Valid for KZG {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: within `ring::KZG`, the trait `ark_ec::models::CurveConfig` is not implemented for `BandersnatchConfig`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/mod.rs:18:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait CurveConfig: Send + Sync + Sized + 'static {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `Affine<BandersnatchConfig>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/affine.rs:30:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Affine<P: SWCurveConfig> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `PiopParams<Fp<..., 4>, ...>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs:12:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `ring::KZG`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:38:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct KZG {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Valid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs:43:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Valid: Sized + Sync {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Valid`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-17509108526647100689.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2541,"byte_end":2550,"line_start":82,"line_end":82,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"    pub fn prover_key(&self, pks: Vec<SWAffine>) -> ProverKey {","highlight_start":53,"highlight_end":62}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::ProverKey`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs","byte_start":4050,"byte_end":4060,"line_start":129,"line_end":129,"column_start":25,"column_end":35,"is_primary":true,"text":[{"text":"pub struct ProverKey<F: PrimeField, CS: PCS<F>, G: AffineRepr<BaseField = F>> {","highlight_start":25,"highlight_end":35}],"label":"required by this bound in `ProverKey`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:82:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn prover_key(&self, pks: Vec<SWAffine>) -> ProverKey {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::ProverKey`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs:129:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0moverKey<F: PrimeField, CS: PCS<F>, G: AffineRepr<BaseField = F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ProverKey`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Affine<BandersnatchConfig>: AffineRepr` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2541,"byte_end":2550,"line_start":82,"line_end":82,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"    pub fn prover_key(&self, pks: Vec<SWAffine>) -> ProverKey {","highlight_start":53,"highlight_end":62}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::AffineRepr` is not implemented for `ark_ec::short_weierstrass::Affine<BandersnatchConfig>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/lib.rs","byte_start":3477,"byte_end":4295,"line_start":122,"line_end":150,"column_start":1,"column_end":63,"is_primary":true,"text":[{"text":"pub trait AffineRepr:","highlight_start":1,"highlight_end":1},{"text":"    Eq","highlight_start":1,"highlight_end":1},{"text":"    + 'static","highlight_start":1,"highlight_end":1},{"text":"    + Sized","highlight_start":1,"highlight_end":1},{"text":"    + CanonicalSerialize","highlight_start":1,"highlight_end":1},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":1},{"text":"    + Copy","highlight_start":1,"highlight_end":1},{"text":"    + Clone","highlight_start":1,"highlight_end":1},{"text":"    + Default","highlight_start":1,"highlight_end":1},{"text":"    + UniformRand","highlight_start":1,"highlight_end":1},{"text":"    + Send","highlight_start":1,"highlight_end":1},{"text":"    + Sync","highlight_start":1,"highlight_end":1},{"text":"    + Hash","highlight_start":1,"highlight_end":1},{"text":"    + Debug","highlight_start":1,"highlight_end":1},{"text":"    + Display","highlight_start":1,"highlight_end":1},{"text":"    + Zeroize","highlight_start":1,"highlight_end":1},{"text":"    + Neg","highlight_start":1,"highlight_end":1},{"text":"    + From<<Self as AffineRepr>::Group>","highlight_start":1,"highlight_end":1},{"text":"    + Into<<Self as AffineRepr>::Group>","highlight_start":1,"highlight_end":1},{"text":"    + Add<Self, Output = Self::Group>","highlight_start":1,"highlight_end":1},{"text":"    + for<'a> Add<&'a Self, Output = Self::Group>","highlight_start":1,"highlight_end":1},{"text":"    + Add<Self::Group, Output = Self::Group>","highlight_start":1,"highlight_end":1},{"text":"    + for<'a> Add<&'a Self::Group, Output = Self::Group>","highlight_start":1,"highlight_end":1},{"text":"    + Sub<Self, Output = Self::Group>","highlight_start":1,"highlight_end":1},{"text":"    + for<'a> Sub<&'a Self, Output = Self::Group>","highlight_start":1,"highlight_end":1},{"text":"    + Sub<Self::Group, Output = Self::Group>","highlight_start":1,"highlight_end":1},{"text":"    + for<'a> Sub<&'a Self::Group, Output = Self::Group>","highlight_start":1,"highlight_end":1},{"text":"    + Mul<Self::ScalarField, Output = Self::Group>","highlight_start":1,"highlight_end":1},{"text":"    + for<'a> Mul<&'a Self::ScalarField, Output = Self::Group>","highlight_start":1,"highlight_end":63}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/short_weierstrass/affine.rs","byte_start":916,"byte_end":951,"line_start":35,"line_end":35,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"pub struct Affine<P: SWCurveConfig> {","highlight_start":1,"highlight_end":36}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/affine.rs","byte_start":775,"byte_end":810,"line_start":30,"line_end":30,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"pub struct Affine<P: SWCurveConfig> {","highlight_start":1,"highlight_end":36}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/twisted_edwards/affine.rs","byte_start":768,"byte_end":803,"line_start":29,"line_end":29,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"pub struct Affine<P: TECurveConfig> {","highlight_start":1,"highlight_end":36}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::ProverKey`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs","byte_start":4077,"byte_end":4102,"line_start":129,"line_end":129,"column_start":52,"column_end":77,"is_primary":true,"text":[{"text":"pub struct ProverKey<F: PrimeField, CS: PCS<F>, G: AffineRepr<BaseField = F>> {","highlight_start":52,"highlight_end":77}],"label":"required by this bound in `ProverKey`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-3988818249282666702.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Affine<BandersnatchConfig>: AffineRepr` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:82:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn prover_key(&self, pks: Vec<SWAffine>) -> ProverKey {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::AffineRepr` is not implemented for `ark_ec::short_weierstrass::Affine<BandersnatchConfig>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/short_weierstrass/affine.rs:35:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Affine<P: SWCurveConfig> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/affine.rs:30:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Affine<P: SWCurveConfig> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/twisted_edwards/affine.rs:29:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Affine<P: TECurveConfig> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/lib.rs:122:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AffineRepr:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Eq\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + 'static\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Sized\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Mul<Self::ScalarField, Output = Self::Group>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + for<'a> Mul<&'a Self::ScalarField, Output = Self::Group>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______________________________________________________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::ProverKey`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs:129:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m G: AffineRepr<BaseField = F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ProverKey`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-3988818249282666702.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2541,"byte_end":2550,"line_start":82,"line_end":82,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"    pub fn prover_key(&self, pks: Vec<SWAffine>) -> ProverKey {","highlight_start":53,"highlight_end":62}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `fflonk::pcs::kzg::KZG`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs","byte_start":651,"byte_end":658,"line_start":24,"line_end":24,"column_start":19,"column_end":26,"is_primary":true,"text":[{"text":"pub struct KZG<E: Pairing> {","highlight_start":19,"highlight_end":26}],"label":"required by this bound in `KZG`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:82:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn prover_key(&self, pks: Vec<SWAffine>) -> ProverKey {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `fflonk::pcs::kzg::KZG`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs:24:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct KZG<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `KZG`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2685,"byte_end":2696,"line_start":86,"line_end":86,"column_start":55,"column_end":66,"is_primary":true,"text":[{"text":"    pub fn verifier_key(&self, pks: Vec<SWAffine>) -> VerifierKey {","highlight_start":55,"highlight_end":66}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::VerifierKey`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs","byte_start":4383,"byte_end":4393,"line_start":136,"line_end":136,"column_start":27,"column_end":37,"is_primary":true,"text":[{"text":"pub struct VerifierKey<F: PrimeField, CS: PCS<F>> {","highlight_start":27,"highlight_end":37}],"label":"required by this bound in `VerifierKey`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:86:55\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn verifier_key(&self, pks: Vec<SWAffine>) -> VerifierKey {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::VerifierKey`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs:136:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct VerifierKey<F: PrimeField, CS: PCS<F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `VerifierKey`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2685,"byte_end":2696,"line_start":86,"line_end":86,"column_start":55,"column_end":66,"is_primary":true,"text":[{"text":"    pub fn verifier_key(&self, pks: Vec<SWAffine>) -> VerifierKey {","highlight_start":55,"highlight_end":66}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `fflonk::pcs::kzg::KZG`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs","byte_start":651,"byte_end":658,"line_start":24,"line_end":24,"column_start":19,"column_end":26,"is_primary":true,"text":[{"text":"pub struct KZG<E: Pairing> {","highlight_start":19,"highlight_end":26}],"label":"required by this bound in `KZG`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:86:55\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn verifier_key(&self, pks: Vec<SWAffine>) -> VerifierKey {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `fflonk::pcs::kzg::KZG`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs:24:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct KZG<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `KZG`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2884,"byte_end":2893,"line_start":91,"line_end":91,"column_start":48,"column_end":57,"is_primary":true,"text":[{"text":"    pub fn init_ring_prover(&self, prover_key: ProverKey, k: usize) -> RingProver {","highlight_start":48,"highlight_end":57}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::ProverKey`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs","byte_start":4050,"byte_end":4060,"line_start":129,"line_end":129,"column_start":25,"column_end":35,"is_primary":true,"text":[{"text":"pub struct ProverKey<F: PrimeField, CS: PCS<F>, G: AffineRepr<BaseField = F>> {","highlight_start":25,"highlight_end":35}],"label":"required by this bound in `ProverKey`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:91:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m&self, prover_key: ProverKey, k: usize) -> RingProver {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::ProverKey`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs:129:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0moverKey<F: PrimeField, CS: PCS<F>, G: AffineRepr<BaseField = F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ProverKey`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Affine<BandersnatchConfig>: AffineRepr` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2884,"byte_end":2893,"line_start":91,"line_end":91,"column_start":48,"column_end":57,"is_primary":true,"text":[{"text":"    pub fn init_ring_prover(&self, prover_key: ProverKey, k: usize) -> RingProver {","highlight_start":48,"highlight_end":57}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::AffineRepr` is not implemented for `ark_ec::short_weierstrass::Affine<BandersnatchConfig>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/lib.rs","byte_start":3477,"byte_end":4295,"line_start":122,"line_end":150,"column_start":1,"column_end":63,"is_primary":true,"text":[{"text":"pub trait AffineRepr:","highlight_start":1,"highlight_end":22},{"text":"    Eq","highlight_start":1,"highlight_end":7},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + CanonicalSerialize","highlight_start":1,"highlight_end":25},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + Hash","highlight_start":1,"highlight_end":11},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + Neg","highlight_start":1,"highlight_end":10},{"text":"    + From<<Self as AffineRepr>::Group>","highlight_start":1,"highlight_end":40},{"text":"    + Into<<Self as AffineRepr>::Group>","highlight_start":1,"highlight_end":40},{"text":"    + Add<Self, Output = Self::Group>","highlight_start":1,"highlight_end":38},{"text":"    + for<'a> Add<&'a Self, Output = Self::Group>","highlight_start":1,"highlight_end":50},{"text":"    + Add<Self::Group, Output = Self::Group>","highlight_start":1,"highlight_end":45},{"text":"    + for<'a> Add<&'a Self::Group, Output = Self::Group>","highlight_start":1,"highlight_end":57},{"text":"    + Sub<Self, Output = Self::Group>","highlight_start":1,"highlight_end":38},{"text":"    + for<'a> Sub<&'a Self, Output = Self::Group>","highlight_start":1,"highlight_end":50},{"text":"    + Sub<Self::Group, Output = Self::Group>","highlight_start":1,"highlight_end":45},{"text":"    + for<'a> Sub<&'a Self::Group, Output = Self::Group>","highlight_start":1,"highlight_end":57},{"text":"    + Mul<Self::ScalarField, Output = Self::Group>","highlight_start":1,"highlight_end":51},{"text":"    + for<'a> Mul<&'a Self::ScalarField, Output = Self::Group>","highlight_start":1,"highlight_end":63}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/short_weierstrass/affine.rs","byte_start":916,"byte_end":951,"line_start":35,"line_end":35,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"pub struct Affine<P: SWCurveConfig> {","highlight_start":1,"highlight_end":36}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/affine.rs","byte_start":775,"byte_end":810,"line_start":30,"line_end":30,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"pub struct Affine<P: SWCurveConfig> {","highlight_start":1,"highlight_end":36}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/twisted_edwards/affine.rs","byte_start":768,"byte_end":803,"line_start":29,"line_end":29,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"pub struct Affine<P: TECurveConfig> {","highlight_start":1,"highlight_end":36}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::ProverKey`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs","byte_start":4077,"byte_end":4102,"line_start":129,"line_end":129,"column_start":52,"column_end":77,"is_primary":true,"text":[{"text":"pub struct ProverKey<F: PrimeField, CS: PCS<F>, G: AffineRepr<BaseField = F>> {","highlight_start":52,"highlight_end":77}],"label":"required by this bound in `ProverKey`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-3988818249282666702.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Affine<BandersnatchConfig>: AffineRepr` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:91:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m&self, prover_key: ProverKey, k: usize) -> RingProver {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::AffineRepr` is not implemented for `ark_ec::short_weierstrass::Affine<BandersnatchConfig>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/short_weierstrass/affine.rs:35:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Affine<P: SWCurveConfig> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/affine.rs:30:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Affine<P: SWCurveConfig> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/twisted_edwards/affine.rs:29:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Affine<P: TECurveConfig> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/lib.rs:122:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AffineRepr:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Eq\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + 'static\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Sized\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Mul<Self::ScalarField, Output = Self::Group>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + for<'a> Mul<&'a Self::ScalarField, Output = Self::Group>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______________________________________________________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::ProverKey`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs:129:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m G: AffineRepr<BaseField = F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ProverKey`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-3988818249282666702.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2884,"byte_end":2893,"line_start":91,"line_end":91,"column_start":48,"column_end":57,"is_primary":true,"text":[{"text":"    pub fn init_ring_prover(&self, prover_key: ProverKey, k: usize) -> RingProver {","highlight_start":48,"highlight_end":57}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `fflonk::pcs::kzg::KZG`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs","byte_start":651,"byte_end":658,"line_start":24,"line_end":24,"column_start":19,"column_end":26,"is_primary":true,"text":[{"text":"pub struct KZG<E: Pairing> {","highlight_start":19,"highlight_end":26}],"label":"required by this bound in `KZG`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:91:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m&self, prover_key: ProverKey, k: usize) -> RingProver {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `fflonk::pcs::kzg::KZG`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs:24:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct KZG<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `KZG`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2908,"byte_end":2918,"line_start":91,"line_end":91,"column_start":72,"column_end":82,"is_primary":true,"text":[{"text":"    pub fn init_ring_prover(&self, prover_key: ProverKey, k: usize) -> RingProver {","highlight_start":72,"highlight_end":82}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs","byte_start":817,"byte_end":860,"line_start":29,"line_end":29,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub trait SWCurveConfig: super::CurveConfig {","highlight_start":1,"highlight_end":44}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::ring_prover::RingProver`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs","byte_start":305,"byte_end":315,"line_start":12,"line_end":12,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"pub struct RingProver<F, CS, Curve, T>","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs","byte_start":385,"byte_end":413,"line_start":16,"line_end":16,"column_start":12,"column_end":40,"is_primary":true,"text":[{"text":"    Curve: SWCurveConfig<BaseField = F>,","highlight_start":12,"highlight_end":40}],"label":"required by this bound in `RingProver`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:91:72\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mrKey, k: usize) -> RingProver {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs:29:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SWCurveConfig: super::CurveConfig {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::ring_prover::RingProver`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs:16:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingProver<F, CS, Curve, T>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Curve: SWCurveConfig<BaseField = F>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RingProver`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":3080,"byte_end":3091,"line_start":95,"line_end":95,"column_start":52,"column_end":63,"is_primary":true,"text":[{"text":"    pub fn init_ring_verifier(&self, verifier_key: VerifierKey) -> RingVerifier {","highlight_start":52,"highlight_end":63}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::VerifierKey`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs","byte_start":4383,"byte_end":4393,"line_start":136,"line_end":136,"column_start":27,"column_end":37,"is_primary":true,"text":[{"text":"pub struct VerifierKey<F: PrimeField, CS: PCS<F>> {","highlight_start":27,"highlight_end":37}],"label":"required by this bound in `VerifierKey`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:95:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mlf, verifier_key: VerifierKey) -> RingVerifier {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::VerifierKey`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs:136:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct VerifierKey<F: PrimeField, CS: PCS<F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `VerifierKey`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":3080,"byte_end":3091,"line_start":95,"line_end":95,"column_start":52,"column_end":63,"is_primary":true,"text":[{"text":"    pub fn init_ring_verifier(&self, verifier_key: VerifierKey) -> RingVerifier {","highlight_start":52,"highlight_end":63}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `fflonk::pcs::kzg::KZG`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs","byte_start":651,"byte_end":658,"line_start":24,"line_end":24,"column_start":19,"column_end":26,"is_primary":true,"text":[{"text":"pub struct KZG<E: Pairing> {","highlight_start":19,"highlight_end":26}],"label":"required by this bound in `KZG`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:95:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mlf, verifier_key: VerifierKey) -> RingVerifier {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `fflonk::pcs::kzg::KZG`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs:24:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct KZG<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `KZG`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":3096,"byte_end":3108,"line_start":95,"line_end":95,"column_start":68,"column_end":80,"is_primary":true,"text":[{"text":"    pub fn init_ring_verifier(&self, verifier_key: VerifierKey) -> RingVerifier {","highlight_start":68,"highlight_end":80}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs","byte_start":817,"byte_end":860,"line_start":29,"line_end":29,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub trait SWCurveConfig: super::CurveConfig {","highlight_start":1,"highlight_end":44}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::ring_verifier::RingVerifier`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs","byte_start":433,"byte_end":445,"line_start":15,"line_end":15,"column_start":12,"column_end":24,"is_primary":false,"text":[{"text":"pub struct RingVerifier<F, CS, Curve, T>","highlight_start":12,"highlight_end":24}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs","byte_start":515,"byte_end":543,"line_start":19,"line_end":19,"column_start":12,"column_end":40,"is_primary":true,"text":[{"text":"    Curve: SWCurveConfig<BaseField = F>,","highlight_start":12,"highlight_end":40}],"label":"required by this bound in `RingVerifier`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:95:68\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m: VerifierKey) -> RingVerifier {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs:29:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SWCurveConfig: super::CurveConfig {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::ring_verifier::RingVerifier`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs:19:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingVerifier<F, CS, Curve, T>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Curve: SWCurveConfig<BaseField = F>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RingVerifier`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1088,"byte_end":1098,"line_start":34,"line_end":34,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    PiopParams::setup(domain, &mut rng)","highlight_start":5,"highlight_end":15}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::PiopParams`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs","byte_start":329,"byte_end":339,"line_start":12,"line_end":12,"column_start":26,"column_end":36,"is_primary":true,"text":[{"text":"pub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {","highlight_start":26,"highlight_end":36}],"label":"required by this bound in `PiopParams`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:34:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    PiopParams::setup(domain, &mut rng)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::PiopParams`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs:12:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `PiopParams`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1088,"byte_end":1098,"line_start":34,"line_end":34,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    PiopParams::setup(domain, &mut rng)","highlight_start":5,"highlight_end":15}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs","byte_start":817,"byte_end":860,"line_start":29,"line_end":29,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub trait SWCurveConfig: super::CurveConfig {","highlight_start":1,"highlight_end":44}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::PiopParams`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs","byte_start":348,"byte_end":376,"line_start":12,"line_end":12,"column_start":45,"column_end":73,"is_primary":true,"text":[{"text":"pub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {","highlight_start":45,"highlight_end":73}],"label":"required by this bound in `PiopParams`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:34:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    PiopParams::setup(domain, &mut rng)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs:29:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SWCurveConfig: super::CurveConfig {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::PiopParams`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs:12:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `PiopParams`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the function or associated item `setup` exists for struct `PiopParams<Fp<..., 4>, ...>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1100,"byte_end":1105,"line_start":34,"line_end":34,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"    PiopParams::setup(domain, &mut rng)","highlight_start":17,"highlight_end":22}],"label":"function or associated item cannot be called on `PiopParams<Fp<..., 4>, ...>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"doesn't satisfy `<_ as CurveConfig>::BaseField = Fp<MontBackend<FqConfig, 4>, 4>`, `BandersnatchConfig: ark_ec::models::CurveConfig` or `_: SWCurveConfig`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"doesn't satisfy `_: PrimeField`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>: ark_ff::fields::prime::PrimeField`\n`BandersnatchConfig: ark_ec::models::short_weierstrass::SWCurveConfig`\n`BandersnatchConfig: ark_ec::models::CurveConfig`\nwhich is required by `<BandersnatchConfig as ark_ec::models::CurveConfig>::BaseField = ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the function or associated item `setup` exists for struct `PiopParams<Fp<..., 4>, ...>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:34:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    PiopParams::setup(domain, &mut rng)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item cannot be called on `PiopParams<Fp<..., 4>, ...>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<_ as CurveConfig>::BaseField = Fp<MontBackend<FqConfig, 4>, 4>`, `BandersnatchConfig: ark_ec::models::CurveConfig` or `_: SWCurveConfig`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: PrimeField`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>: ark_ff::fields::prime::PrimeField`\u001b[0m\n\u001b[0m            `BandersnatchConfig: ark_ec::models::short_weierstrass::SWCurveConfig`\u001b[0m\n\u001b[0m            `BandersnatchConfig: ark_ec::models::CurveConfig`\u001b[0m\n\u001b[0m            which is required by `<BandersnatchConfig as ark_ec::models::CurveConfig>::BaseField = ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1207,"byte_end":1230,"line_start":41,"line_end":41,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"    piop_params: PiopParams,","highlight_start":5,"highlight_end":28}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1136,"byte_end":1141,"line_start":37,"line_end":37,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"#[derive(Clone)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Clone)]","def_site_span":{"file_name":"/rustc/5bc62314547c7639484481f62f218156697cfef0/library/core/src/clone.rs","byte_start":5958,"byte_end":5973,"line_start":183,"line_end":183,"column_start":1,"column_end":16,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::PiopParams`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs","byte_start":329,"byte_end":339,"line_start":12,"line_end":12,"column_start":26,"column_end":36,"is_primary":true,"text":[{"text":"pub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {","highlight_start":26,"highlight_end":36}],"label":"required by this bound in `PiopParams`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:41:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this derive macro expansion\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    piop_params: PiopParams,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::PiopParams`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs:12:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `PiopParams`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1207,"byte_end":1230,"line_start":41,"line_end":41,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"    piop_params: PiopParams,","highlight_start":5,"highlight_end":28}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1136,"byte_end":1141,"line_start":37,"line_end":37,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"#[derive(Clone)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Clone)]","def_site_span":{"file_name":"/rustc/5bc62314547c7639484481f62f218156697cfef0/library/core/src/clone.rs","byte_start":5958,"byte_end":5973,"line_start":183,"line_end":183,"column_start":1,"column_end":16,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs","byte_start":817,"byte_end":860,"line_start":29,"line_end":29,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub trait SWCurveConfig: super::CurveConfig {","highlight_start":1,"highlight_end":44}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::PiopParams`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs","byte_start":348,"byte_end":376,"line_start":12,"line_end":12,"column_start":45,"column_end":73,"is_primary":true,"text":[{"text":"pub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {","highlight_start":45,"highlight_end":73}],"label":"required by this bound in `PiopParams`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:41:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this derive macro expansion\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    piop_params: PiopParams,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs:29:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SWCurveConfig: super::CurveConfig {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::PiopParams`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs:12:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `PiopParams`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1236,"byte_end":1257,"line_start":42,"line_end":42,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"    pcs_params: PcsParams,","highlight_start":5,"highlight_end":26}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1136,"byte_end":1141,"line_start":37,"line_end":37,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"#[derive(Clone)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Clone)]","def_site_span":{"file_name":"/rustc/5bc62314547c7639484481f62f218156697cfef0/library/core/src/clone.rs","byte_start":5958,"byte_end":5973,"line_start":183,"line_end":183,"column_start":1,"column_end":16,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `URS`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs","byte_start":369,"byte_end":376,"line_start":14,"line_end":14,"column_start":19,"column_end":26,"is_primary":true,"text":[{"text":"pub struct URS<E: Pairing> {","highlight_start":19,"highlight_end":26}],"label":"required by this bound in `URS`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:42:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this derive macro expansion\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pcs_params: PcsParams,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `URS`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs:14:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct URS<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `URS`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1428,"byte_end":1472,"line_start":49,"line_end":49,"column_start":27,"column_end":71,"is_primary":true,"text":[{"text":"        let piop_params = make_piop_params(seed, domain_size as usize);","highlight_start":27,"highlight_end":71}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::PiopParams`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs","byte_start":329,"byte_end":339,"line_start":12,"line_end":12,"column_start":26,"column_end":36,"is_primary":true,"text":[{"text":"pub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {","highlight_start":26,"highlight_end":36}],"label":"required by this bound in `PiopParams`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:49:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let piop_params = make_piop_params(seed, domain_size as usize);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::PiopParams`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs:12:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `PiopParams`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1428,"byte_end":1472,"line_start":49,"line_end":49,"column_start":27,"column_end":71,"is_primary":true,"text":[{"text":"        let piop_params = make_piop_params(seed, domain_size as usize);","highlight_start":27,"highlight_end":71}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs","byte_start":817,"byte_end":860,"line_start":29,"line_end":29,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub trait SWCurveConfig: super::CurveConfig {","highlight_start":1,"highlight_end":44}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::PiopParams`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs","byte_start":348,"byte_end":376,"line_start":12,"line_end":12,"column_start":45,"column_end":73,"is_primary":true,"text":[{"text":"pub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {","highlight_start":45,"highlight_end":73}],"label":"required by this bound in `PiopParams`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:49:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let piop_params = make_piop_params(seed, domain_size as usize);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs:29:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SWCurveConfig: super::CurveConfig {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::PiopParams`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs:12:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `PiopParams`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1499,"byte_end":1506,"line_start":50,"line_end":50,"column_start":26,"column_end":33,"is_primary":true,"text":[{"text":"        let pcs_params = RealKZG::setup(3 * (domain_size as usize), rng);","highlight_start":26,"highlight_end":33}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `fflonk::pcs::kzg::KZG`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs","byte_start":651,"byte_end":658,"line_start":24,"line_end":24,"column_start":19,"column_end":26,"is_primary":true,"text":[{"text":"pub struct KZG<E: Pairing> {","highlight_start":19,"highlight_end":26}],"label":"required by this bound in `KZG`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:50:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let pcs_params = RealKZG::setup(3 * (domain_size as usize), rng);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `fflonk::pcs::kzg::KZG`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs:24:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct KZG<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `KZG`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the function or associated item `setup` exists for struct `KZG<Bls12<Config>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1508,"byte_end":1513,"line_start":50,"line_end":50,"column_start":35,"column_end":40,"is_primary":true,"text":[{"text":"        let pcs_params = RealKZG::setup(3 * (domain_size as usize), rng);","highlight_start":35,"highlight_end":40}],"label":"function or associated item cannot be called on `KZG<Bls12<Config>>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs","byte_start":633,"byte_end":659,"line_start":24,"line_end":24,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"pub struct KZG<E: Pairing> {","highlight_start":1,"highlight_end":27}],"label":"doesn't satisfy `_: PCS<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"doesn't satisfy `<_ as Pairing>::ScalarField = _` or `_: Pairing`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing`\nwhich is required by `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>: PCS<_>`\n`<Bls12<ark_bls12_381::Config> as ark_ec::pairing::Pairing>::ScalarField = _`\nwhich is required by `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>: PCS<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the function or associated item `setup` exists for struct `KZG<Bls12<Config>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:50:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let pcs_params = RealKZG::setup(3 * (domain_size as usize), rng);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item cannot be called on `KZG<Bls12<Config>>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct KZG<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: PCS<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:169:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<_ as Pairing>::ScalarField = _` or `_: Pairing`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing`\u001b[0m\n\u001b[0m            which is required by `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>: PCS<_>`\u001b[0m\n\u001b[0m            `<Bls12<ark_bls12_381::Config> as ark_ec::pairing::Pairing>::ScalarField = _`\u001b[0m\n\u001b[0m            which is required by `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>: PCS<_>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1617,"byte_end":1628,"line_start":54,"line_end":54,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"            piop_params,","highlight_start":13,"highlight_end":24}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::PiopParams`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs","byte_start":329,"byte_end":339,"line_start":12,"line_end":12,"column_start":26,"column_end":36,"is_primary":true,"text":[{"text":"pub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {","highlight_start":26,"highlight_end":36}],"label":"required by this bound in `PiopParams`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:54:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            piop_params,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::PiopParams`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs:12:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `PiopParams`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1617,"byte_end":1628,"line_start":54,"line_end":54,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"            piop_params,","highlight_start":13,"highlight_end":24}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs","byte_start":817,"byte_end":860,"line_start":29,"line_end":29,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub trait SWCurveConfig: super::CurveConfig {","highlight_start":1,"highlight_end":44}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::PiopParams`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs","byte_start":348,"byte_end":376,"line_start":12,"line_end":12,"column_start":45,"column_end":73,"is_primary":true,"text":[{"text":"pub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {","highlight_start":45,"highlight_end":73}],"label":"required by this bound in `PiopParams`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:54:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            piop_params,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs:29:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SWCurveConfig: super::CurveConfig {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::PiopParams`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs:12:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `PiopParams`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":1642,"byte_end":1652,"line_start":55,"line_end":55,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"            pcs_params,","highlight_start":13,"highlight_end":23}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `URS`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs","byte_start":369,"byte_end":376,"line_start":14,"line_end":14,"column_start":19,"column_end":26,"is_primary":true,"text":[{"text":"pub struct URS<E: Pairing> {","highlight_start":19,"highlight_end":26}],"label":"required by this bound in `URS`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:55:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            pcs_params,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `URS`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs:14:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct URS<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `URS`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `clone` exists for struct `URS<Bls12<Config>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2589,"byte_end":2594,"line_start":83,"line_end":83,"column_start":37,"column_end":42,"is_primary":true,"text":[{"text":"        ring::index(self.pcs_params.clone(), &self.piop_params, pks).0","highlight_start":37,"highlight_end":42}],"label":"method cannot be called on `URS<Bls12<Config>>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs","byte_start":351,"byte_end":377,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"pub struct URS<E: Pairing> {","highlight_start":1,"highlight_end":27}],"label":"doesn't satisfy `URS<Bls12<ark_bls12_381::Config>>: Clone`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"doesn't satisfy `_: Pairing`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing`\nwhich is required by `URS<Bls12<ark_bls12_381::Config>>: Clone`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `clone` exists for struct `URS<Bls12<Config>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:83:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ring::index(self.pcs_params.clone(), &self.piop_params, pks).0\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `URS<Bls12<Config>>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs:14:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct URS<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `URS<Bls12<ark_bls12_381::Config>>: Clone`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:169:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Pairing`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing`\u001b[0m\n\u001b[0m            which is required by `URS<Bls12<ark_bls12_381::Config>>: Clone`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2598,"byte_end":2615,"line_start":83,"line_end":83,"column_start":46,"column_end":63,"is_primary":true,"text":[{"text":"        ring::index(self.pcs_params.clone(), &self.piop_params, pks).0","highlight_start":46,"highlight_end":63}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2561,"byte_end":2572,"line_start":83,"line_end":83,"column_start":9,"column_end":20,"is_primary":false,"text":[{"text":"        ring::index(self.pcs_params.clone(), &self.piop_params, pks).0","highlight_start":9,"highlight_end":20}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::index`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs","byte_start":5333,"byte_end":5343,"line_start":165,"line_end":165,"column_start":17,"column_end":27,"is_primary":true,"text":[{"text":"pub fn index<F: PrimeField, CS: PCS<F>, Curve: SWCurveConfig<BaseField = F>>(","highlight_start":17,"highlight_end":27}],"label":"required by this bound in `index`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:83:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ring::index(self.pcs_params.clone(), &self.piop_params, pks).0\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::index`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs:165:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn index<F: PrimeField, CS: PCS<F>, Curve: SWCurveConfig<BaseField = F>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `index`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2561,"byte_end":2572,"line_start":83,"line_end":83,"column_start":9,"column_end":20,"is_primary":true,"text":[{"text":"        ring::index(self.pcs_params.clone(), &self.piop_params, pks).0","highlight_start":9,"highlight_end":20}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs","byte_start":817,"byte_end":860,"line_start":29,"line_end":29,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub trait SWCurveConfig: super::CurveConfig {","highlight_start":1,"highlight_end":44}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::index`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs","byte_start":5364,"byte_end":5392,"line_start":165,"line_end":165,"column_start":48,"column_end":76,"is_primary":true,"text":[{"text":"pub fn index<F: PrimeField, CS: PCS<F>, Curve: SWCurveConfig<BaseField = F>>(","highlight_start":48,"highlight_end":76}],"label":"required by this bound in `index`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:83:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ring::index(self.pcs_params.clone(), &self.piop_params, pks).0\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs:29:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SWCurveConfig: super::CurveConfig {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::index`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs:165:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn index<F: PrimeField, CS: PCS<F>, Curve: SWCurveConfig<BaseField = F>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `index`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2617,"byte_end":2620,"line_start":83,"line_end":83,"column_start":65,"column_end":68,"is_primary":true,"text":[{"text":"        ring::index(self.pcs_params.clone(), &self.piop_params, pks).0","highlight_start":65,"highlight_end":68}],"label":"expected `&[Affine<BandersnatchConfig>]`, found `Vec<Affine<BandersnatchConfig>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2561,"byte_end":2572,"line_start":83,"line_end":83,"column_start":9,"column_end":20,"is_primary":false,"text":[{"text":"        ring::index(self.pcs_params.clone(), &self.piop_params, pks).0","highlight_start":9,"highlight_end":20}],"label":"arguments to this function are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&[ark_ec::models::short_weierstrass::affine::Affine<BandersnatchConfig>]`\n      found struct `Vec<ark_ec::short_weierstrass::Affine<BandersnatchConfig>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs","byte_start":5324,"byte_end":5329,"line_start":165,"line_end":165,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"pub fn index<F: PrimeField, CS: PCS<F>, Curve: SWCurveConfig<BaseField = F>>(","highlight_start":8,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:83:65\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ring::index(self.pcs_params.clone(), &self.piop_params, pks).0\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this function are incorrect\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `&[Affine<BandersnatchConfig>]`, found `Vec<Affine<BandersnatchConfig>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m\u001b[35m&[ark_ec::models::short_weierstrass::affine::Affine<BandersnatchConfig>]\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                  found struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mVec<ark_ec::short_weierstrass::Affine<BandersnatchConfig>>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs:165:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn index<F: PrimeField, CS: PCS<F>, Curve: SWCurveConfig<BaseField = F>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2561,"byte_end":2621,"line_start":83,"line_end":83,"column_start":9,"column_end":69,"is_primary":true,"text":[{"text":"        ring::index(self.pcs_params.clone(), &self.piop_params, pks).0","highlight_start":9,"highlight_end":69}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::ProverKey`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs","byte_start":4050,"byte_end":4060,"line_start":129,"line_end":129,"column_start":25,"column_end":35,"is_primary":true,"text":[{"text":"pub struct ProverKey<F: PrimeField, CS: PCS<F>, G: AffineRepr<BaseField = F>> {","highlight_start":25,"highlight_end":35}],"label":"required by this bound in `ProverKey`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:83:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ring::index(self.pcs_params.clone(), &self.piop_params, pks).0\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::ProverKey`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs:129:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0moverKey<F: PrimeField, CS: PCS<F>, G: AffineRepr<BaseField = F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ProverKey`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2561,"byte_end":2621,"line_start":83,"line_end":83,"column_start":9,"column_end":69,"is_primary":true,"text":[{"text":"        ring::index(self.pcs_params.clone(), &self.piop_params, pks).0","highlight_start":9,"highlight_end":69}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs","byte_start":817,"byte_end":860,"line_start":29,"line_end":29,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub trait SWCurveConfig: super::CurveConfig {","highlight_start":1,"highlight_end":44}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ark_ec::models::short_weierstrass::affine::Affine`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/affine.rs","byte_start":796,"byte_end":809,"line_start":30,"line_end":30,"column_start":22,"column_end":35,"is_primary":true,"text":[{"text":"pub struct Affine<P: SWCurveConfig> {","highlight_start":22,"highlight_end":35}],"label":"required by this bound in `Affine`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:83:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ring::index(self.pcs_params.clone(), &self.piop_params, pks).0\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs:29:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SWCurveConfig: super::CurveConfig {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ark_ec::models::short_weierstrass::affine::Affine`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/affine.rs:30:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Affine<P: SWCurveConfig> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Affine`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2561,"byte_end":2623,"line_start":83,"line_end":83,"column_start":9,"column_end":71,"is_primary":true,"text":[{"text":"        ring::index(self.pcs_params.clone(), &self.piop_params, pks).0","highlight_start":9,"highlight_end":71}],"label":"expected `ProverKey<Fp<..., 4>, ..., ...>`, found `ProverKey<Fp<..., 4>, _, ...>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2541,"byte_end":2550,"line_start":82,"line_end":82,"column_start":53,"column_end":62,"is_primary":false,"text":[{"text":"    pub fn prover_key(&self, pks: Vec<SWAffine>) -> ProverKey {","highlight_start":53,"highlight_end":62}],"label":"expected `ring::ProverKey<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ark_ec::short_weierstrass::Affine<BandersnatchConfig>>` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"two different versions of crate `ark_ec` are being used; two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/short_weierstrass/affine.rs","byte_start":916,"byte_end":951,"line_start":35,"line_end":35,"column_start":1,"column_end":36,"is_primary":true,"text":[{"text":"pub struct Affine<P: SWCurveConfig> {","highlight_start":1,"highlight_end":36}],"label":"this is the expected type `ark_ec::short_weierstrass::Affine`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/affine.rs","byte_start":775,"byte_end":810,"line_start":30,"line_end":30,"column_start":1,"column_end":36,"is_primary":true,"text":[{"text":"pub struct Affine<P: SWCurveConfig> {","highlight_start":1,"highlight_end":36}],"label":"this is the found type `ark_ec::models::short_weierstrass::affine::Affine`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-9758775549449250329.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:83:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn prover_key(&self, pks: Vec<SWAffine>) -> ProverKey {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `ring::ProverKey<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ark_ec::short_weierstrass::Affine<BandersnatchConfig>>` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ring::index(self.pcs_params.clone(), &self.piop_params, pks).0\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `ProverKey<Fp<..., 4>, ..., ...>`, found `ProverKey<Fp<..., 4>, _, ...>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: two different versions of crate `ark_ec` are being used; two types coming from two different versions of the same crate are different types even if they look the same\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/short_weierstrass/affine.rs:35:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Affine<P: SWCurveConfig> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the expected type `ark_ec::short_weierstrass::Affine`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/affine.rs:30:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Affine<P: SWCurveConfig> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the found type `ark_ec::models::short_weierstrass::affine::Affine`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `cargo tree` to explore your dependency tree\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-9758775549449250329.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `clone` exists for struct `URS<Bls12<Config>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2735,"byte_end":2740,"line_start":87,"line_end":87,"column_start":37,"column_end":42,"is_primary":true,"text":[{"text":"        ring::index(self.pcs_params.clone(), &self.piop_params, pks).1","highlight_start":37,"highlight_end":42}],"label":"method cannot be called on `URS<Bls12<Config>>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs","byte_start":351,"byte_end":377,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"pub struct URS<E: Pairing> {","highlight_start":1,"highlight_end":27}],"label":"doesn't satisfy `URS<Bls12<ark_bls12_381::Config>>: Clone`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"doesn't satisfy `_: Pairing`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing`\nwhich is required by `URS<Bls12<ark_bls12_381::Config>>: Clone`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `clone` exists for struct `URS<Bls12<Config>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:87:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ring::index(self.pcs_params.clone(), &self.piop_params, pks).1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `URS<Bls12<Config>>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs:14:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct URS<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `URS<Bls12<ark_bls12_381::Config>>: Clone`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:169:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Pairing`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing`\u001b[0m\n\u001b[0m            which is required by `URS<Bls12<ark_bls12_381::Config>>: Clone`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2744,"byte_end":2761,"line_start":87,"line_end":87,"column_start":46,"column_end":63,"is_primary":true,"text":[{"text":"        ring::index(self.pcs_params.clone(), &self.piop_params, pks).1","highlight_start":46,"highlight_end":63}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2707,"byte_end":2718,"line_start":87,"line_end":87,"column_start":9,"column_end":20,"is_primary":false,"text":[{"text":"        ring::index(self.pcs_params.clone(), &self.piop_params, pks).1","highlight_start":9,"highlight_end":20}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::index`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs","byte_start":5333,"byte_end":5343,"line_start":165,"line_end":165,"column_start":17,"column_end":27,"is_primary":true,"text":[{"text":"pub fn index<F: PrimeField, CS: PCS<F>, Curve: SWCurveConfig<BaseField = F>>(","highlight_start":17,"highlight_end":27}],"label":"required by this bound in `index`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:87:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ring::index(self.pcs_params.clone(), &self.piop_params, pks).1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::index`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs:165:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn index<F: PrimeField, CS: PCS<F>, Curve: SWCurveConfig<BaseField = F>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `index`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2707,"byte_end":2718,"line_start":87,"line_end":87,"column_start":9,"column_end":20,"is_primary":true,"text":[{"text":"        ring::index(self.pcs_params.clone(), &self.piop_params, pks).1","highlight_start":9,"highlight_end":20}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs","byte_start":817,"byte_end":860,"line_start":29,"line_end":29,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub trait SWCurveConfig: super::CurveConfig {","highlight_start":1,"highlight_end":44}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::index`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs","byte_start":5364,"byte_end":5392,"line_start":165,"line_end":165,"column_start":48,"column_end":76,"is_primary":true,"text":[{"text":"pub fn index<F: PrimeField, CS: PCS<F>, Curve: SWCurveConfig<BaseField = F>>(","highlight_start":48,"highlight_end":76}],"label":"required by this bound in `index`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:87:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ring::index(self.pcs_params.clone(), &self.piop_params, pks).1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs:29:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SWCurveConfig: super::CurveConfig {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::index`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs:165:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn index<F: PrimeField, CS: PCS<F>, Curve: SWCurveConfig<BaseField = F>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `index`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2763,"byte_end":2766,"line_start":87,"line_end":87,"column_start":65,"column_end":68,"is_primary":true,"text":[{"text":"        ring::index(self.pcs_params.clone(), &self.piop_params, pks).1","highlight_start":65,"highlight_end":68}],"label":"expected `&[Affine<BandersnatchConfig>]`, found `Vec<Affine<BandersnatchConfig>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2707,"byte_end":2718,"line_start":87,"line_end":87,"column_start":9,"column_end":20,"is_primary":false,"text":[{"text":"        ring::index(self.pcs_params.clone(), &self.piop_params, pks).1","highlight_start":9,"highlight_end":20}],"label":"arguments to this function are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&[ark_ec::models::short_weierstrass::affine::Affine<BandersnatchConfig>]`\n      found struct `Vec<ark_ec::short_weierstrass::Affine<BandersnatchConfig>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs","byte_start":5324,"byte_end":5329,"line_start":165,"line_end":165,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"pub fn index<F: PrimeField, CS: PCS<F>, Curve: SWCurveConfig<BaseField = F>>(","highlight_start":8,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:87:65\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ring::index(self.pcs_params.clone(), &self.piop_params, pks).1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this function are incorrect\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `&[Affine<BandersnatchConfig>]`, found `Vec<Affine<BandersnatchConfig>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m\u001b[35m&[ark_ec::models::short_weierstrass::affine::Affine<BandersnatchConfig>]\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                  found struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mVec<ark_ec::short_weierstrass::Affine<BandersnatchConfig>>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs:165:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn index<F: PrimeField, CS: PCS<F>, Curve: SWCurveConfig<BaseField = F>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2707,"byte_end":2767,"line_start":87,"line_end":87,"column_start":9,"column_end":69,"is_primary":true,"text":[{"text":"        ring::index(self.pcs_params.clone(), &self.piop_params, pks).1","highlight_start":9,"highlight_end":69}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::ProverKey`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs","byte_start":4050,"byte_end":4060,"line_start":129,"line_end":129,"column_start":25,"column_end":35,"is_primary":true,"text":[{"text":"pub struct ProverKey<F: PrimeField, CS: PCS<F>, G: AffineRepr<BaseField = F>> {","highlight_start":25,"highlight_end":35}],"label":"required by this bound in `ProverKey`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:87:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ring::index(self.pcs_params.clone(), &self.piop_params, pks).1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::ProverKey`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs:129:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0moverKey<F: PrimeField, CS: PCS<F>, G: AffineRepr<BaseField = F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ProverKey`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2707,"byte_end":2767,"line_start":87,"line_end":87,"column_start":9,"column_end":69,"is_primary":true,"text":[{"text":"        ring::index(self.pcs_params.clone(), &self.piop_params, pks).1","highlight_start":9,"highlight_end":69}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs","byte_start":817,"byte_end":860,"line_start":29,"line_end":29,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub trait SWCurveConfig: super::CurveConfig {","highlight_start":1,"highlight_end":44}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ark_ec::models::short_weierstrass::affine::Affine`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/affine.rs","byte_start":796,"byte_end":809,"line_start":30,"line_end":30,"column_start":22,"column_end":35,"is_primary":true,"text":[{"text":"pub struct Affine<P: SWCurveConfig> {","highlight_start":22,"highlight_end":35}],"label":"required by this bound in `Affine`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:87:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ring::index(self.pcs_params.clone(), &self.piop_params, pks).1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs:29:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SWCurveConfig: super::CurveConfig {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ark_ec::models::short_weierstrass::affine::Affine`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/affine.rs:30:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Affine<P: SWCurveConfig> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Affine`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2707,"byte_end":2767,"line_start":87,"line_end":87,"column_start":9,"column_end":69,"is_primary":true,"text":[{"text":"        ring::index(self.pcs_params.clone(), &self.piop_params, pks).1","highlight_start":9,"highlight_end":69}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::index`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs","byte_start":5349,"byte_end":5355,"line_start":165,"line_end":165,"column_start":33,"column_end":39,"is_primary":true,"text":[{"text":"pub fn index<F: PrimeField, CS: PCS<F>, Curve: SWCurveConfig<BaseField = F>>(","highlight_start":33,"highlight_end":39}],"label":"required by this bound in `index`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:87:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ring::index(self.pcs_params.clone(), &self.piop_params, pks).1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::index`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs:165:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn index<F: PrimeField, CS: PCS<F>, Curve: SWCurveConfig<BaseField = F>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `index`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2929,"byte_end":2939,"line_start":92,"line_end":92,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        RingProver::init(prover_key, self.piop_params.clone(), k, Transcript::new(b\"ring-vrf-test\"))","highlight_start":9,"highlight_end":19}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::ring_prover::RingProver`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs","byte_start":305,"byte_end":315,"line_start":12,"line_end":12,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"pub struct RingProver<F, CS, Curve, T>","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs","byte_start":346,"byte_end":356,"line_start":14,"line_end":14,"column_start":8,"column_end":18,"is_primary":true,"text":[{"text":"    F: PrimeField,","highlight_start":8,"highlight_end":18}],"label":"required by this bound in `RingProver`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:92:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   RingProver::init(prover_key, self.piop_params.clone(), k, Transcript\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::ring_prover::RingProver`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs:14:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingProver<F, CS, Curve, T>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    F: PrimeField,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RingProver`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2929,"byte_end":2939,"line_start":92,"line_end":92,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        RingProver::init(prover_key, self.piop_params.clone(), k, Transcript::new(b\"ring-vrf-test\"))","highlight_start":9,"highlight_end":19}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs","byte_start":817,"byte_end":860,"line_start":29,"line_end":29,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub trait SWCurveConfig: super::CurveConfig {","highlight_start":1,"highlight_end":44}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::ring_prover::RingProver`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs","byte_start":305,"byte_end":315,"line_start":12,"line_end":12,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"pub struct RingProver<F, CS, Curve, T>","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs","byte_start":385,"byte_end":413,"line_start":16,"line_end":16,"column_start":12,"column_end":40,"is_primary":true,"text":[{"text":"    Curve: SWCurveConfig<BaseField = F>,","highlight_start":12,"highlight_end":40}],"label":"required by this bound in `RingProver`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:92:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   RingProver::init(prover_key, self.piop_params.clone(), k, Transcript:\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs:29:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SWCurveConfig: super::CurveConfig {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::ring_prover::RingProver`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_prover.rs:16:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingProver<F, CS, Curve, T>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Curve: SWCurveConfig<BaseField = F>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RingProver`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2929,"byte_end":2939,"line_start":92,"line_end":92,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        RingProver::init(prover_key, self.piop_params.clone(), k, Transcript::new(b\"ring-vrf-test\"))","highlight_start":9,"highlight_end":19}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `fflonk::pcs::kzg::KZG`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs","byte_start":651,"byte_end":658,"line_start":24,"line_end":24,"column_start":19,"column_end":26,"is_primary":true,"text":[{"text":"pub struct KZG<E: Pairing> {","highlight_start":19,"highlight_end":26}],"label":"required by this bound in `KZG`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:92:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   RingProver::init(prover_key, self.piop_params.clone(), k, Transcript\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `fflonk::pcs::kzg::KZG`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs:24:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct KZG<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `KZG`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `clone` exists for struct `PiopParams<Fp<..., 4>, ...>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":2975,"byte_end":2980,"line_start":92,"line_end":92,"column_start":55,"column_end":60,"is_primary":true,"text":[{"text":"        RingProver::init(prover_key, self.piop_params.clone(), k, Transcript::new(b\"ring-vrf-test\"))","highlight_start":55,"highlight_end":60}],"label":"method cannot be called on `PiopParams<Fp<..., 4>, ...>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"doesn't satisfy `<_ as CurveConfig>::BaseField = Fp<MontBackend<FqConfig, 4>, 4>` or `_: SWCurveConfig`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs","byte_start":304,"byte_end":377,"line_start":12,"line_end":12,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"pub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {","highlight_start":1,"highlight_end":74}],"label":"doesn't satisfy `_: Clone`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"doesn't satisfy `_: PrimeField`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`<BandersnatchConfig as ark_ec::models::CurveConfig>::BaseField = ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>`\nwhich is required by `ring::PiopParams<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, BandersnatchConfig>: Clone`\n`ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>: ark_ff::fields::prime::PrimeField`\nwhich is required by `ring::PiopParams<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, BandersnatchConfig>: Clone`\n`BandersnatchConfig: ark_ec::models::short_weierstrass::SWCurveConfig`\nwhich is required by `ring::PiopParams<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, BandersnatchConfig>: Clone`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `clone` exists for struct `PiopParams<Fp<..., 4>, ...>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:92:55\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mover_key, self.piop_params.clone(), k, Transcript::new(b\"ring-vrf-test\"))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `PiopParams<Fp<..., 4>, ...>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<_ as CurveConfig>::BaseField = Fp<MontBackend<FqConfig, 4>, 4>` or `_: SWCurveConfig`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs:12:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Clone`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: PrimeField`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `<BandersnatchConfig as ark_ec::models::CurveConfig>::BaseField = ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m            which is required by `ring::PiopParams<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, BandersnatchConfig>: Clone`\u001b[0m\n\u001b[0m            `ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>: ark_ff::fields::prime::PrimeField`\u001b[0m\n\u001b[0m            which is required by `ring::PiopParams<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, BandersnatchConfig>: Clone`\u001b[0m\n\u001b[0m            `BandersnatchConfig: ark_ec::models::short_weierstrass::SWCurveConfig`\u001b[0m\n\u001b[0m            which is required by `ring::PiopParams<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, BandersnatchConfig>: Clone`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":3119,"byte_end":3131,"line_start":96,"line_end":96,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"        RingVerifier::init(verifier_key, self.piop_params.clone(), Transcript::new(b\"ring-vrf-test\"))","highlight_start":9,"highlight_end":21}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::ring_verifier::RingVerifier`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs","byte_start":433,"byte_end":445,"line_start":15,"line_end":15,"column_start":12,"column_end":24,"is_primary":false,"text":[{"text":"pub struct RingVerifier<F, CS, Curve, T>","highlight_start":12,"highlight_end":24}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs","byte_start":476,"byte_end":486,"line_start":17,"line_end":17,"column_start":8,"column_end":18,"is_primary":true,"text":[{"text":"    F: PrimeField,","highlight_start":8,"highlight_end":18}],"label":"required by this bound in `RingVerifier`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:96:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   RingVerifier::init(verifier_key, self.piop_params.clone(), Transcrip\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::ring_verifier::RingVerifier`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs:17:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingVerifier<F, CS, Curve, T>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    F: PrimeField,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RingVerifier`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":3119,"byte_end":3131,"line_start":96,"line_end":96,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"        RingVerifier::init(verifier_key, self.piop_params.clone(), Transcript::new(b\"ring-vrf-test\"))","highlight_start":9,"highlight_end":21}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs","byte_start":817,"byte_end":860,"line_start":29,"line_end":29,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub trait SWCurveConfig: super::CurveConfig {","highlight_start":1,"highlight_end":44}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::ring_verifier::RingVerifier`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs","byte_start":433,"byte_end":445,"line_start":15,"line_end":15,"column_start":12,"column_end":24,"is_primary":false,"text":[{"text":"pub struct RingVerifier<F, CS, Curve, T>","highlight_start":12,"highlight_end":24}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs","byte_start":515,"byte_end":543,"line_start":19,"line_end":19,"column_start":12,"column_end":40,"is_primary":true,"text":[{"text":"    Curve: SWCurveConfig<BaseField = F>,","highlight_start":12,"highlight_end":40}],"label":"required by this bound in `RingVerifier`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:96:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   RingVerifier::init(verifier_key, self.piop_params.clone(), Transcript\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs:29:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SWCurveConfig: super::CurveConfig {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::ring_verifier::RingVerifier`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/ring_verifier.rs:19:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingVerifier<F, CS, Curve, T>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Curve: SWCurveConfig<BaseField = F>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RingVerifier`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":3119,"byte_end":3131,"line_start":96,"line_end":96,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"        RingVerifier::init(verifier_key, self.piop_params.clone(), Transcript::new(b\"ring-vrf-test\"))","highlight_start":9,"highlight_end":21}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `fflonk::pcs::kzg::KZG`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs","byte_start":651,"byte_end":658,"line_start":24,"line_end":24,"column_start":19,"column_end":26,"is_primary":true,"text":[{"text":"pub struct KZG<E: Pairing> {","highlight_start":19,"highlight_end":26}],"label":"required by this bound in `KZG`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:96:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   RingVerifier::init(verifier_key, self.piop_params.clone(), Transcrip\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `fflonk::pcs::kzg::KZG`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs:24:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct KZG<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `KZG`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `clone` exists for struct `PiopParams<Fp<..., 4>, ...>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":3169,"byte_end":3174,"line_start":96,"line_end":96,"column_start":59,"column_end":64,"is_primary":true,"text":[{"text":"        RingVerifier::init(verifier_key, self.piop_params.clone(), Transcript::new(b\"ring-vrf-test\"))","highlight_start":59,"highlight_end":64}],"label":"method cannot be called on `PiopParams<Fp<..., 4>, ...>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"doesn't satisfy `<_ as CurveConfig>::BaseField = Fp<MontBackend<FqConfig, 4>, 4>` or `_: SWCurveConfig`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs","byte_start":304,"byte_end":377,"line_start":12,"line_end":12,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"pub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {","highlight_start":1,"highlight_end":74}],"label":"doesn't satisfy `_: Clone`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"doesn't satisfy `_: PrimeField`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`<BandersnatchConfig as ark_ec::models::CurveConfig>::BaseField = ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>`\nwhich is required by `ring::PiopParams<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, BandersnatchConfig>: Clone`\n`ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>: ark_ff::fields::prime::PrimeField`\nwhich is required by `ring::PiopParams<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, BandersnatchConfig>: Clone`\n`BandersnatchConfig: ark_ec::models::short_weierstrass::SWCurveConfig`\nwhich is required by `ring::PiopParams<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, BandersnatchConfig>: Clone`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `clone` exists for struct `PiopParams<Fp<..., 4>, ...>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:96:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mfier_key, self.piop_params.clone(), Transcript::new(b\"ring-vrf-test\"))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `PiopParams<Fp<..., 4>, ...>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<_ as CurveConfig>::BaseField = Fp<MontBackend<FqConfig, 4>, 4>` or `_: SWCurveConfig`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs:12:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Clone`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: PrimeField`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `<BandersnatchConfig as ark_ec::models::CurveConfig>::BaseField = ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m            which is required by `ring::PiopParams<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, BandersnatchConfig>: Clone`\u001b[0m\n\u001b[0m            `ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>: ark_ff::fields::prime::PrimeField`\u001b[0m\n\u001b[0m            which is required by `ring::PiopParams<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, BandersnatchConfig>: Clone`\u001b[0m\n\u001b[0m            `BandersnatchConfig: ark_ec::models::short_weierstrass::SWCurveConfig`\u001b[0m\n\u001b[0m            which is required by `ring::PiopParams<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, BandersnatchConfig>: Clone`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `serialize_with_mode` found for struct `URS` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":3571,"byte_end":3590,"line_start":110,"line_end":110,"column_start":25,"column_end":44,"is_primary":true,"text":[{"text":"        self.pcs_params.serialize_with_mode(&mut writer, compress) ?;","highlight_start":25,"highlight_end":44}],"label":"method not found in `URS<Bls12<Config>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `serialize_with_mode` found for struct `URS` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:110:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.pcs_params.serialize_with_mode(&mut writer, compress) ?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `URS<Bls12<Config>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `serialized_size` found for struct `URS` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":3807,"byte_end":3822,"line_start":117,"line_end":117,"column_start":27,"column_end":42,"is_primary":true,"text":[{"text":"        + self.pcs_params.serialized_size(compress)","highlight_start":27,"highlight_end":42}],"label":"method not found in `URS<Bls12<Config>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `serialized_size` found for struct `URS` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:117:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        + self.pcs_params.serialized_size(compress)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `URS<Bls12<Config>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":4258,"byte_end":4302,"line_start":130,"line_end":130,"column_start":27,"column_end":71,"is_primary":true,"text":[{"text":"        let piop_params = make_piop_params(seed, domain_size as usize);","highlight_start":27,"highlight_end":71}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::PiopParams`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs","byte_start":329,"byte_end":339,"line_start":12,"line_end":12,"column_start":26,"column_end":36,"is_primary":true,"text":[{"text":"pub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {","highlight_start":26,"highlight_end":36}],"label":"required by this bound in `PiopParams`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:130:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let piop_params = make_piop_params(seed, domain_size as usize);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::PiopParams`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs:12:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `PiopParams`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":4258,"byte_end":4302,"line_start":130,"line_end":130,"column_start":27,"column_end":71,"is_primary":true,"text":[{"text":"        let piop_params = make_piop_params(seed, domain_size as usize);","highlight_start":27,"highlight_end":71}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs","byte_start":817,"byte_end":860,"line_start":29,"line_end":29,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub trait SWCurveConfig: super::CurveConfig {","highlight_start":1,"highlight_end":44}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::PiopParams`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs","byte_start":348,"byte_end":376,"line_start":12,"line_end":12,"column_start":45,"column_end":73,"is_primary":true,"text":[{"text":"pub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {","highlight_start":45,"highlight_end":73}],"label":"required by this bound in `PiopParams`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:130:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let piop_params = make_piop_params(seed, domain_size as usize);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs:29:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SWCurveConfig: super::CurveConfig {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::PiopParams`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs:12:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `PiopParams`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `URS<Bls12<ark_bls12_381::Config>>: CanonicalDeserialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":4330,"byte_end":4339,"line_start":131,"line_end":131,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"        let pcs_params = <PcsParams as CanonicalDeserialize>::deserialize_with_mode(&mut reader, compress, validate) ?;","highlight_start":27,"highlight_end":36}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `CanonicalDeserialize` is not implemented for `URS<Bls12<ark_bls12_381::Config>>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_serialize` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs","byte_start":3319,"byte_end":3356,"line_start":126,"line_end":126,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"pub trait CanonicalDeserialize: Valid {","highlight_start":1,"highlight_end":38}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":86,"byte_end":99,"line_start":6,"line_end":6,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"use ark_serialize::{","highlight_start":5,"highlight_end":18}],"label":"one version of crate `ark_serialize` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_serialize` used here, as a dependency of crate `ark_ff`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs","byte_start":351,"byte_end":377,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"pub struct URS<E: Pairing> {","highlight_start":1,"highlight_end":27}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.5.0/src/flags.rs","byte_start":514,"byte_end":561,"line_start":10,"line_end":10,"column_start":1,"column_end":48,"is_primary":false,"text":[{"text":"pub trait Flags: Default + Clone + Copy + Sized {","highlight_start":1,"highlight_end":48}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `URS<Bls12<ark_bls12_381::Config>>: CanonicalDeserialize` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:131:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let pcs_params = <PcsParams as CanonicalDeserialize>::deserialize_wi\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `CanonicalDeserialize` is not implemented for `URS<Bls12<ark_bls12_381::Config>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_serialize\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs:126:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait CanonicalDeserialize: Valid {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:6:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_serialize::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_serialize` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_serialize` used here, as a dependency of crate `ark_ff`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs:14:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct URS<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.5.0/src/flags.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Flags: Default + Clone + Copy + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":4330,"byte_end":4339,"line_start":131,"line_end":131,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"        let pcs_params = <PcsParams as CanonicalDeserialize>::deserialize_with_mode(&mut reader, compress, validate) ?;","highlight_start":27,"highlight_end":36}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `URS`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs","byte_start":369,"byte_end":376,"line_start":14,"line_end":14,"column_start":19,"column_end":26,"is_primary":true,"text":[{"text":"pub struct URS<E: Pairing> {","highlight_start":19,"highlight_end":26}],"label":"required by this bound in `URS`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:131:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let pcs_params = <PcsParams as CanonicalDeserialize>::deserialize_wi\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `URS`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs:14:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct URS<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `URS`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":4329,"byte_end":4420,"line_start":131,"line_end":131,"column_start":26,"column_end":117,"is_primary":true,"text":[{"text":"        let pcs_params = <PcsParams as CanonicalDeserialize>::deserialize_with_mode(&mut reader, compress, validate) ?;","highlight_start":26,"highlight_end":117}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `URS`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs","byte_start":369,"byte_end":376,"line_start":14,"line_end":14,"column_start":19,"column_end":26,"is_primary":true,"text":[{"text":"pub struct URS<E: Pairing> {","highlight_start":19,"highlight_end":26}],"label":"required by this bound in `URS`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:131:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m = <PcsParams as CanonicalDeserialize>::deserialize_with_mode(&mut reader, compress, validate)\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `URS`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs:14:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct URS<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `URS`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":4329,"byte_end":4422,"line_start":131,"line_end":131,"column_start":26,"column_end":119,"is_primary":true,"text":[{"text":"        let pcs_params = <PcsParams as CanonicalDeserialize>::deserialize_with_mode(&mut reader, compress, validate) ?;","highlight_start":26,"highlight_end":119}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":4329,"byte_end":4422,"line_start":131,"line_end":131,"column_start":26,"column_end":119,"is_primary":false,"text":[{"text":"        let pcs_params = <PcsParams as CanonicalDeserialize>::deserialize_with_mode(&mut reader, compress, validate) ?;","highlight_start":26,"highlight_end":119}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `URS`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs","byte_start":369,"byte_end":376,"line_start":14,"line_end":14,"column_start":19,"column_end":26,"is_primary":true,"text":[{"text":"pub struct URS<E: Pairing> {","highlight_start":19,"highlight_end":26}],"label":"required by this bound in `URS`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:131:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m = <PcsParams as CanonicalDeserialize>::deserialize_with_mode(&mut reader, compress, validate)\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `URS`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs:14:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct URS<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `URS`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":4496,"byte_end":4507,"line_start":135,"line_end":135,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"            piop_params,","highlight_start":13,"highlight_end":24}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::PiopParams`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs","byte_start":329,"byte_end":339,"line_start":12,"line_end":12,"column_start":26,"column_end":36,"is_primary":true,"text":[{"text":"pub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {","highlight_start":26,"highlight_end":36}],"label":"required by this bound in `PiopParams`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:135:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            piop_params,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::PiopParams`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs:12:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `PiopParams`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":4496,"byte_end":4507,"line_start":135,"line_end":135,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"            piop_params,","highlight_start":13,"highlight_end":24}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs","byte_start":817,"byte_end":860,"line_start":29,"line_end":29,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub trait SWCurveConfig: super::CurveConfig {","highlight_start":1,"highlight_end":44}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs","byte_start":1893,"byte_end":1922,"line_start":52,"line_end":52,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"pub struct BandersnatchConfig;","highlight_start":1,"highlight_end":30}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ring::PiopParams`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs","byte_start":348,"byte_end":376,"line_start":12,"line_end":12,"column_start":45,"column_end":73,"is_primary":true,"text":[{"text":"pub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {","highlight_start":45,"highlight_end":73}],"label":"required by this bound in `PiopParams`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BandersnatchConfig: SWCurveConfig` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:135:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            piop_params,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::models::short_weierstrass::SWCurveConfig` is not implemented for `BandersnatchConfig`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/short_weierstrass/mod.rs:29:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait SWCurveConfig: super::CurveConfig {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ed-on-bls12-381-bandersnatch-0.4.0/src/curves/mod.rs:52:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BandersnatchConfig;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ring::PiopParams`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/params.rs:12:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PiopParams<F: PrimeField, Curve: SWCurveConfig<BaseField = F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `PiopParams`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-8207669667062719601.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":4521,"byte_end":4531,"line_start":136,"line_end":136,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"            pcs_params,","highlight_start":13,"highlight_end":23}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `URS`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs","byte_start":369,"byte_end":376,"line_start":14,"line_end":14,"column_start":19,"column_end":26,"is_primary":true,"text":[{"text":"pub struct URS<E: Pairing> {","highlight_start":19,"highlight_end":26}],"label":"required by this bound in `URS`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:136:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            pcs_params,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `URS`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/urs.rs:14:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct URS<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `URS`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `check` found for struct `URS` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":4654,"byte_end":4659,"line_start":143,"line_end":143,"column_start":25,"column_end":30,"is_primary":true,"text":[{"text":"        self.pcs_params.check()","highlight_start":25,"highlight_end":30}],"label":"method not found in `URS<Bls12<Config>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `check` found for struct `URS` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:143:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.pcs_params.check()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `URS<Bls12<Config>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":4411,"byte_end":4421,"line_start":140,"line_end":140,"column_start":51,"column_end":61,"is_primary":true,"text":[{"text":"        RingVrfSignature { preoutputs, signature, ring_proof, }","highlight_start":51,"highlight_end":61}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:140:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        RingVrfSignature { preoutputs, signature, ring_proof, }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":4411,"byte_end":4421,"line_start":140,"line_end":140,"column_start":51,"column_end":61,"is_primary":true,"text":[{"text":"        RingVrfSignature { preoutputs, signature, ring_proof, }","highlight_start":51,"highlight_end":61}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `common::Proof`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/common/src/lib.rs","byte_start":2193,"byte_end":2198,"line_start":80,"line_end":80,"column_start":12,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Proof<F, CS, Commitments, Evaluations>","highlight_start":12,"highlight_end":17}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/common/src/lib.rs","byte_start":2245,"byte_end":2255,"line_start":82,"line_end":82,"column_start":8,"column_end":18,"is_primary":true,"text":[{"text":"    F: PrimeField,","highlight_start":8,"highlight_end":18}],"label":"required by this bound in `Proof`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:140:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        RingVrfSignature { preoutputs, signature, ring_proof, }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `common::Proof`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/common/src/lib.rs:82:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Proof<F, CS, Commitments, Evaluations>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    F: PrimeField,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Proof`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5764,"byte_end":5782,"line_start":190,"line_end":190,"column_start":10,"column_end":28,"is_primary":true,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":10,"highlight_end":28}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5764,"byte_end":5782,"line_start":190,"line_end":190,"column_start":10,"column_end":28,"is_primary":false,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":10,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalSerialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.4.2/src/lib.rs","byte_start":304,"byte_end":396,"line_start":19,"line_end":19,"column_start":1,"column_end":93,"is_primary":false,"text":[{"text":"pub fn derive_canonical_serialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:190:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(CanonicalSerialize,CanonicalDeserialize)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalSerialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Proof<..., ..., ..., ...>: CanonicalSerialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5764,"byte_end":5782,"line_start":190,"line_end":190,"column_start":10,"column_end":28,"is_primary":true,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":10,"highlight_end":28}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5764,"byte_end":5782,"line_start":190,"line_end":190,"column_start":10,"column_end":28,"is_primary":false,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":10,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalSerialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.4.2/src/lib.rs","byte_start":304,"byte_end":396,"line_start":19,"line_end":19,"column_start":1,"column_end":93,"is_primary":false,"text":[{"text":"pub fn derive_canonical_serialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `CanonicalSerialize` is not implemented for `Proof<Fp<..., 4>, ..., ..., ...>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_serialize` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs","byte_start":2066,"byte_end":2094,"line_start":83,"line_end":83,"column_start":1,"column_end":29,"is_primary":true,"text":[{"text":"pub trait CanonicalSerialize {","highlight_start":1,"highlight_end":29}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":86,"byte_end":99,"line_start":6,"line_end":6,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"use ark_serialize::{","highlight_start":5,"highlight_end":18}],"label":"one version of crate `ark_serialize` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_serialize` used here, as a dependency of crate `ark_ff`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/common/src/lib.rs","byte_start":2182,"byte_end":2231,"line_start":80,"line_end":80,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"pub struct Proof<F, CS, Commitments, Evaluations>","highlight_start":1,"highlight_end":50}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.5.0/src/flags.rs","byte_start":514,"byte_end":561,"line_start":10,"line_end":10,"column_start":1,"column_end":48,"is_primary":false,"text":[{"text":"pub trait Flags: Default + Clone + Copy + Sized {","highlight_start":1,"highlight_end":48}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-5207937314289144253.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Proof<..., ..., ..., ...>: CanonicalSerialize` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:190:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(CanonicalSerialize,CanonicalDeserialize)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `CanonicalSerialize` is not implemented for `Proof<Fp<..., 4>, ..., ..., ...>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_serialize\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs:83:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait CanonicalSerialize {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:6:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_serialize::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_serialize` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_serialize` used here, as a dependency of crate `ark_ff`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/common/src/lib.rs:80:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Proof<F, CS, Commitments, Evaluations>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.5.0/src/flags.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Flags: Default + Clone + Copy + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-5207937314289144253.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalSerialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5764,"byte_end":5782,"line_start":190,"line_end":190,"column_start":10,"column_end":28,"is_primary":true,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":10,"highlight_end":28}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5764,"byte_end":5782,"line_start":190,"line_end":190,"column_start":10,"column_end":28,"is_primary":false,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":10,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalSerialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.4.2/src/lib.rs","byte_start":304,"byte_end":396,"line_start":19,"line_end":19,"column_start":1,"column_end":93,"is_primary":false,"text":[{"text":"pub fn derive_canonical_serialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `common::Proof`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/common/src/lib.rs","byte_start":2193,"byte_end":2198,"line_start":80,"line_end":80,"column_start":12,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Proof<F, CS, Commitments, Evaluations>","highlight_start":12,"highlight_end":17}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/common/src/lib.rs","byte_start":2245,"byte_end":2255,"line_start":82,"line_end":82,"column_start":8,"column_end":18,"is_primary":true,"text":[{"text":"    F: PrimeField,","highlight_start":8,"highlight_end":18}],"label":"required by this bound in `Proof`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:190:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(CanonicalSerialize,CanonicalDeserialize)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `common::Proof`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/common/src/lib.rs:82:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Proof<F, CS, Commitments, Evaluations>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    F: PrimeField,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Proof`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalSerialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5802,"byte_end":5803,"line_start":190,"line_end":190,"column_start":48,"column_end":49,"is_primary":true,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":48,"highlight_end":49}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5802,"byte_end":5803,"line_start":190,"line_end":190,"column_start":48,"column_end":49,"is_primary":false,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":48,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5783,"byte_end":5803,"line_start":190,"line_end":190,"column_start":29,"column_end":49,"is_primary":false,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":29,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.4.2/src/lib.rs","byte_start":567,"byte_end":661,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because it appears within the type `RingVrfSignature<N>`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5817,"byte_end":5833,"line_start":191,"line_end":191,"column_start":12,"column_end":28,"is_primary":true,"text":[{"text":"pub struct RingVrfSignature<const N: usize> {","highlight_start":12,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required for `Result<RingVrfSignature<N>, SerializationError>` to implement `FromResidual<Result<Infallible, SerializationError>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:190:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(CanonicalSerialize,CanonicalDeserialize)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `RingVrfSignature<N>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:191:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingVrfSignature<const N: usize> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Result<RingVrfSignature<N>, SerializationError>` to implement `FromResidual<Result<Infallible, SerializationError>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5783,"byte_end":5803,"line_start":190,"line_end":190,"column_start":29,"column_end":49,"is_primary":true,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":29,"highlight_end":49}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5783,"byte_end":5803,"line_start":190,"line_end":190,"column_start":29,"column_end":49,"is_primary":false,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":29,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.4.2/src/lib.rs","byte_start":567,"byte_end":661,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:190:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(CanonicalSerialize,CanonicalDeserialize)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5783,"byte_end":5803,"line_start":190,"line_end":190,"column_start":29,"column_end":49,"is_primary":true,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":29,"highlight_end":49}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5783,"byte_end":5803,"line_start":190,"line_end":190,"column_start":29,"column_end":49,"is_primary":false,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":29,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.4.2/src/lib.rs","byte_start":567,"byte_end":661,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":10101,"byte_end":10161,"line_start":337,"line_end":337,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"impl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `ark_ff` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ff` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs","byte_start":1071,"byte_end":1276,"line_start":27,"line_end":34,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait PrimeField:","highlight_start":1,"highlight_end":22},{"text":"    Field<BasePrimeField = Self>","highlight_start":1,"highlight_end":33},{"text":"    + FftField","highlight_start":1,"highlight_end":15},{"text":"    + FromStr","highlight_start":1,"highlight_end":14},{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":1,"highlight_end":41},{"text":"    + From<BigUint>","highlight_start":1,"highlight_end":20},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":311,"byte_end":343,"line_start":17,"line_end":17,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"use ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};","highlight_start":5,"highlight_end":37}],"label":"one version of crate `ark_ff` used here, as a dependency of crate `ark_ec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs","byte_start":3805,"byte_end":3850,"line_start":106,"line_end":106,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs","byte_start":18633,"byte_end":19022,"line_start":716,"line_end":739,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait BigInteger:","highlight_start":1,"highlight_end":22},{"text":"    CanonicalSerialize","highlight_start":1,"highlight_end":23},{"text":"    + CanonicalDeserialize","highlight_start":1,"highlight_end":27},{"text":"    + Copy","highlight_start":1,"highlight_end":11},{"text":"    + Clone","highlight_start":1,"highlight_end":12},{"text":"    + Debug","highlight_start":1,"highlight_end":12},{"text":"    + Default","highlight_start":1,"highlight_end":14},{"text":"    + Display","highlight_start":1,"highlight_end":14},{"text":"    + Eq","highlight_start":1,"highlight_end":9},{"text":"    + Ord","highlight_start":1,"highlight_end":10},{"text":"    + Send","highlight_start":1,"highlight_end":11},{"text":"    + Sized","highlight_start":1,"highlight_end":12},{"text":"    + Sync","highlight_start":1,"highlight_end":11},{"text":"    + 'static","highlight_start":1,"highlight_end":14},{"text":"    + UniformRand","highlight_start":1,"highlight_end":18},{"text":"    + Zeroize","highlight_start":1,"highlight_end":14},{"text":"    + AsMut<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + AsRef<[u64]>","highlight_start":1,"highlight_end":19},{"text":"    + From<u64>","highlight_start":1,"highlight_end":16},{"text":"    + From<u32>","highlight_start":1,"highlight_end":16},{"text":"    + From<u16>","highlight_start":1,"highlight_end":16},{"text":"    + From<u8>","highlight_start":1,"highlight_end":15},{"text":"    + TryFrom<BigUint, Error = ()>","highlight_start":1,"highlight_end":35},{"text":"    + Into<BigUint>","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `common::Proof`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/common/src/lib.rs","byte_start":2193,"byte_end":2198,"line_start":80,"line_end":80,"column_start":12,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Proof<F, CS, Commitments, Evaluations>","highlight_start":12,"highlight_end":17}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/common/src/lib.rs","byte_start":2245,"byte_end":2255,"line_start":82,"line_end":82,"column_start":8,"column_end":18,"is_primary":true,"text":[{"text":"    F: PrimeField,","highlight_start":8,"highlight_end":18}],"label":"required by this bound in `Proof`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Fp<MontBackend<..., 4>, 4>: PrimeField` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:190:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(CanonicalSerialize,CanonicalDeserialize)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ff::fields::prime::PrimeField` is not implemented for `Fp<MontBackend<FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:337:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<P: FpConfig<N>, const N: usize> PrimeField for Fp<P, N> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `ark_ff` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ark_ed_on_bls12_381_bandersnatch::{Fq, Fr, SWConfig, SWAffine};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ff` used here, as a dependency of crate `ark_ec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/models/fp/mod.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.5.0/src/fields/prime.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait PrimeField:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Field<BasePrimeField = Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FftField\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + FromStr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<BigUint>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/biginteger/mod.rs:716:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BigInteger:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CanonicalSerialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + CanonicalDeserialize\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Copy\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + TryFrom<BigUint, Error = ()>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<BigUint>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `common::Proof`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/common/src/lib.rs:82:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Proof<F, CS, Commitments, Evaluations>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    F: PrimeField,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Proof`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-11972904562715534285.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Proof<..., ..., ..., ...>: CanonicalDeserialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5783,"byte_end":5803,"line_start":190,"line_end":190,"column_start":29,"column_end":49,"is_primary":true,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":29,"highlight_end":49}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5783,"byte_end":5803,"line_start":190,"line_end":190,"column_start":29,"column_end":49,"is_primary":false,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":29,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.4.2/src/lib.rs","byte_start":567,"byte_end":661,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `CanonicalDeserialize` is not implemented for `Proof<Fp<..., 4>, ..., ..., ...>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_serialize` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs","byte_start":3319,"byte_end":3356,"line_start":126,"line_end":126,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"pub trait CanonicalDeserialize: Valid {","highlight_start":1,"highlight_end":38}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":86,"byte_end":99,"line_start":6,"line_end":6,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"use ark_serialize::{","highlight_start":5,"highlight_end":18}],"label":"one version of crate `ark_serialize` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_serialize` used here, as a dependency of crate `ark_ff`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/common/src/lib.rs","byte_start":2182,"byte_end":2231,"line_start":80,"line_end":80,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"pub struct Proof<F, CS, Commitments, Evaluations>","highlight_start":1,"highlight_end":50}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.5.0/src/flags.rs","byte_start":514,"byte_end":561,"line_start":10,"line_end":10,"column_start":1,"column_end":48,"is_primary":false,"text":[{"text":"pub trait Flags: Default + Clone + Copy + Sized {","highlight_start":1,"highlight_end":48}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-2885722454741329229.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Proof<..., ..., ..., ...>: CanonicalDeserialize` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:190:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(CanonicalSerialize,CanonicalDeserialize)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `CanonicalDeserialize` is not implemented for `Proof<Fp<..., 4>, ..., ..., ...>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_serialize\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs:126:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait CanonicalDeserialize: Valid {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:6:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_serialize::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_serialize` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_serialize` used here, as a dependency of crate `ark_ff`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/common/src/lib.rs:80:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Proof<F, CS, Commitments, Evaluations>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.5.0/src/flags.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Flags: Default + Clone + Copy + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-2885722454741329229.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Proof<Fp<..., 4>, ..., ..., ...>: Valid` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5783,"byte_end":5803,"line_start":190,"line_end":190,"column_start":29,"column_end":49,"is_primary":true,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":29,"highlight_end":49}],"label":"the trait `Valid` is not implemented for `Proof<Fp<..., 4>, ..., ..., ...>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5783,"byte_end":5803,"line_start":190,"line_end":190,"column_start":29,"column_end":49,"is_primary":false,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":29,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.4.2/src/lib.rs","byte_start":567,"byte_end":661,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"there are multiple different versions of crate `ark_serialize` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs","byte_start":1028,"byte_end":1057,"line_start":43,"line_end":43,"column_start":1,"column_end":30,"is_primary":true,"text":[{"text":"pub trait Valid: Sized + Sync {","highlight_start":1,"highlight_end":30}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":86,"byte_end":99,"line_start":6,"line_end":6,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"use ark_serialize::{","highlight_start":5,"highlight_end":18}],"label":"one version of crate `ark_serialize` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_serialize` used here, as a dependency of crate `ark_ff`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/common/src/lib.rs","byte_start":2182,"byte_end":2231,"line_start":80,"line_end":80,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"pub struct Proof<F, CS, Commitments, Evaluations>","highlight_start":1,"highlight_end":50}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.5.0/src/flags.rs","byte_start":514,"byte_end":561,"line_start":10,"line_end":10,"column_start":1,"column_end":48,"is_primary":false,"text":[{"text":"pub trait Flags: Default + Clone + Copy + Sized {","highlight_start":1,"highlight_end":48}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-3375562839862876572.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Proof<Fp<..., 4>, ..., ..., ...>: Valid` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:190:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(CanonicalSerialize,CanonicalDeserialize)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Valid` is not implemented for `Proof<Fp<..., 4>, ..., ..., ...>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_serialize\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs:43:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Valid: Sized + Sync {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:6:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_serialize::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_serialize` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_serialize` used here, as a dependency of crate `ark_ff`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/common/src/lib.rs:80:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Proof<F, CS, Commitments, Evaluations>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.5.0/src/flags.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Flags: Default + Clone + Copy + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-3375562839862876572.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5783,"byte_end":5803,"line_start":190,"line_end":190,"column_start":29,"column_end":49,"is_primary":true,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":29,"highlight_end":49}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5783,"byte_end":5803,"line_start":190,"line_end":190,"column_start":29,"column_end":49,"is_primary":false,"text":[{"text":"#[derive(CanonicalSerialize,CanonicalDeserialize)]","highlight_start":29,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CanonicalDeserialize)]","def_site_span":{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-derive-0.4.2/src/lib.rs","byte_start":567,"byte_end":661,"line_start":25,"line_end":25,"column_start":1,"column_end":95,"is_primary":false,"text":[{"text":"pub fn derive_canonical_deserialize(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because it appears within the type `RingVrfSignature<N>`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":5817,"byte_end":5833,"line_start":191,"line_end":191,"column_start":12,"column_end":28,"is_primary":true,"text":[{"text":"pub struct RingVrfSignature<const N: usize> {","highlight_start":12,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it appears within the type `&RingVrfSignature<N>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `core::slice::Iter<'_, &RingVrfSignature<N>>` to implement `Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because it appears within the type `Map<Iter<'_, &RingVrfSignature<N>>, ...>`","code":null,"level":"note","spans":[{"file_name":"/rustc/5bc62314547c7639484481f62f218156697cfef0/library/core/src/iter/adapters/map.rs","byte_start":2071,"byte_end":2074,"line_start":61,"line_end":61,"column_start":12,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `batch_check`","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs","byte_start":1123,"byte_end":1134,"line_start":46,"line_end":46,"column_start":8,"column_end":19,"is_primary":false,"text":[{"text":"    fn batch_check<'a>(","highlight_start":8,"highlight_end":19}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs","byte_start":1188,"byte_end":1192,"line_start":47,"line_end":47,"column_start":49,"column_end":53,"is_primary":true,"text":[{"text":"        batch: impl Iterator<Item = &'a Self> + Send,","highlight_start":49,"highlight_end":53}],"label":"required by this bound in `Valid::batch_check`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-3410187270674026543.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:190:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(CanonicalSerialize,CanonicalDeserialize)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `RingVrfSignature<N>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:191:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingVrfSignature<const N: usize> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because it appears within the type `&RingVrfSignature<N>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `core::slice::Iter<'_, &RingVrfSignature<N>>` to implement `Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `Map<Iter<'_, &RingVrfSignature<N>>, ...>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/rustc/5bc62314547c7639484481f62f218156697cfef0/library/core/src/iter/adapters/map.rs:61:12\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `batch_check`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-serialize-0.4.2/src/lib.rs:47:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn batch_check<'a>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        batch: impl Iterator<Item = &'a Self> + Send,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Valid::batch_check`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/mnt/c/Users/danie/Documents/GitHub/teste/pallet/target/debug/deps/bandersnatch_vrfs-a60ac3f913273783.long-type-3410187270674026543.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CanonicalDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `clone` exists for struct `Proof<Fp<..., 4>, ..., ..., ...>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":6622,"byte_end":6627,"line_start":214,"line_end":214,"column_start":63,"column_end":68,"is_primary":true,"text":[{"text":"        match ring_verifier.verify_ring_proof(self.ring_proof.clone(), key_commitment.0.clone()) {","highlight_start":63,"highlight_end":68}],"label":"method cannot be called on `Proof<Fp<..., 4>, ..., ..., ...>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs","byte_start":633,"byte_end":659,"line_start":24,"line_end":24,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"pub struct KZG<E: Pairing> {","highlight_start":1,"highlight_end":27}],"label":"doesn't satisfy `_: Clone` or `_: PCS<Fp<MontBackend<FqConfig, 4>, 4>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/common/src/lib.rs","byte_start":2182,"byte_end":2231,"line_start":80,"line_end":80,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"pub struct Proof<F, CS, Commitments, Evaluations>","highlight_start":1,"highlight_end":50}],"label":"doesn't satisfy `_: Clone`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"pub struct Fp<P: FpConfig<N>, const N: usize>(","highlight_start":1,"highlight_end":46}],"label":"doesn't satisfy `_: PrimeField`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"doesn't satisfy `<_ as Pairing>::ScalarField = Fp<MontBackend<FqConfig, 4>, 4>` or `_: Pairing`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs","byte_start":776,"byte_end":835,"line_start":26,"line_end":26,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub struct RingCommitments<F: PrimeField, C: Commitment<F>> {","highlight_start":1,"highlight_end":60}],"label":"doesn't satisfy `_: Clone` or `_: ColumnsCommited<Fp<MontBackend<FqConfig, 4>, 4>, KzgCommitment<Bls12<Config>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs","byte_start":1324,"byte_end":1365,"line_start":45,"line_end":45,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"pub struct RingEvaluations<F: PrimeField> {","highlight_start":1,"highlight_end":42}],"label":"doesn't satisfy `_: Clone` or `_: ColumnsEvaluated<Fp<MontBackend<FqConfig, 4>, 4>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/commitment.rs","byte_start":388,"byte_end":424,"line_start":13,"line_end":13,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"pub struct KzgCommitment<E: Pairing>(pub E::G1Affine);","highlight_start":1,"highlight_end":37}],"label":"doesn't satisfy `KzgCommitment<Bls12<ark_bls12_381::Config>>: Clone`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>: Clone`\nwhich is required by `common::Proof<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>, ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>>: Clone`\n`ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>: Clone`\nwhich is required by `common::Proof<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>, ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>>: Clone`\n`ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>: Clone`\nwhich is required by `common::Proof<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>, ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>>: Clone`\n`ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>: ark_ff::fields::prime::PrimeField`\nwhich is required by `common::Proof<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>, ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>>: Clone`\n`fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>: PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`\nwhich is required by `common::Proof<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>, ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>>: Clone`\n`Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing`\nwhich is required by `common::Proof<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>, ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>>: Clone`\n`<Bls12<ark_bls12_381::Config> as ark_ec::pairing::Pairing>::ScalarField = ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>`\nwhich is required by `common::Proof<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>, ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>>: Clone`\n`ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>: common::ColumnsCommited<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>`\nwhich is required by `common::Proof<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>, ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>>: Clone`\n`ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>: common::ColumnsEvaluated<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`\nwhich is required by `common::Proof<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>, ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>>: Clone`\n`KzgCommitment<Bls12<ark_bls12_381::Config>>: Clone`\nwhich is required by `common::Proof<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>, ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>>: Clone`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `clone` exists for struct `Proof<Fp<..., 4>, ..., ..., ...>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:214:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mring_proof(self.ring_proof.clone(), key_commitment.0.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `Proof<Fp<..., 4>, ..., ..., ...>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/mod.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct KZG<E: Pairing> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Clone` or `_: PCS<Fp<MontBackend<FqConfig, 4>, 4>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/common/src/lib.rs:80:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Proof<F, CS, Commitments, Evaluations>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Clone`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/mod.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Fp<P: FpConfig<N>, const N: usize>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: PrimeField`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:169:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<_ as Pairing>::ScalarField = Fp<MontBackend<FqConfig, 4>, 4>` or `_: Pairing`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-proof-501c05b83d0fab94/1eedf08/ring/src/piop/mod.rs:26:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingCommitments<F: PrimeField, C: Commitment<F>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Clone` or `_: ColumnsCommited<Fp<MontBackend<FqConfig, 4>, 4>, KzgCommitment<Bls12<Config>>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RingEvaluations<F: PrimeField> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Clone` or `_: ColumnsEvaluated<Fp<MontBackend<FqConfig, 4>, 4>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/fflonk-3bda211f084db985/eda051e/src/pcs/kzg/commitment.rs:13:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct KzgCommitment<E: Pairing>(pub E::G1Affine);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `KzgCommitment<Bls12<ark_bls12_381::Config>>: Clone`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>: Clone`\u001b[0m\n\u001b[0m            which is required by `common::Proof<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>, ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>>: Clone`\u001b[0m\n\u001b[0m            `ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>: Clone`\u001b[0m\n\u001b[0m            which is required by `common::Proof<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>, ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>>: Clone`\u001b[0m\n\u001b[0m            `ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>: Clone`\u001b[0m\n\u001b[0m            which is required by `common::Proof<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>, ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>>: Clone`\u001b[0m\n\u001b[0m            `ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>: ark_ff::fields::prime::PrimeField`\u001b[0m\n\u001b[0m            which is required by `common::Proof<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>, ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>>: Clone`\u001b[0m\n\u001b[0m            `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>: PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`\u001b[0m\n\u001b[0m            which is required by `common::Proof<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>, ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>>: Clone`\u001b[0m\n\u001b[0m            `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing`\u001b[0m\n\u001b[0m            which is required by `common::Proof<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>, ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>>: Clone`\u001b[0m\n\u001b[0m            `<Bls12<ark_bls12_381::Config> as ark_ec::pairing::Pairing>::ScalarField = ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>`\u001b[0m\n\u001b[0m            which is required by `common::Proof<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>, ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>>: Clone`\u001b[0m\n\u001b[0m            `ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>: common::ColumnsCommited<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>`\u001b[0m\n\u001b[0m            which is required by `common::Proof<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>, ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>>: Clone`\u001b[0m\n\u001b[0m            `ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>: common::ColumnsEvaluated<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`\u001b[0m\n\u001b[0m            which is required by `common::Proof<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>, ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>>: Clone`\u001b[0m\n\u001b[0m            `KzgCommitment<Bls12<ark_bls12_381::Config>>: Clone`\u001b[0m\n\u001b[0m            which is required by `common::Proof<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>, ring::piop::RingCommitments<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>, KzgCommitment<Bls12<ark_bls12_381::Config>>>, ring::piop::RingEvaluations<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>>: Clone`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":6606,"byte_end":6621,"line_start":214,"line_end":214,"column_start":47,"column_end":62,"is_primary":true,"text":[{"text":"        match ring_verifier.verify_ring_proof(self.ring_proof.clone(), key_commitment.0.clone()) {","highlight_start":47,"highlight_end":62}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there are multiple different versions of crate `ark_ec` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs","byte_start":736,"byte_end":804,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"pub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {","highlight_start":1,"highlight_end":69}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs","byte_start":246,"byte_end":252,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use fflonk::pcs::PCS;","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a dependency of crate `fflonk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs","byte_start":248,"byte_end":254,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"use ark_ec::{","highlight_start":5,"highlight_end":11}],"label":"one version of crate `ark_ec` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":5427,"byte_end":5459,"line_start":169,"line_end":169,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs","byte_start":5451,"byte_end":5483,"line_start":170,"line_end":170,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"pub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);","highlight_start":1,"highlight_end":33}],"label":"this type implements the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs","byte_start":627,"byte_end":665,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"pub trait Bls12Config: 'static + Sized {","highlight_start":1,"highlight_end":39}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bls12<ark_bls12_381::Config>: ark_ec::pairing::Pairing` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:214:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mrify_ring_proof(self.ring_proof.clone(), key_commitment.0.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `ark_ec::pairing::Pairing` is not implemented for `Bls12<ark_bls12_381::Config>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ec\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/pairing.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Pairing: Sized + 'static + Copy + Debug + Sync + Send + Eq {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/ring.rs:13:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fflonk::pcs::PCS;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a dependency of crate `fflonk`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/git/checkouts/ring-vrf-c71688ebb05e13dc/c86ebd4/bandersnatch_vrfs/src/lib.rs:12:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ark_ec::{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `ark_ec` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.4.2/src/models/bls12/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Bls12Config: 'static + Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/danie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ec-0.5.0/src/models/bls12/mod.rs:170:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bls12<P: Bls12Config>(PhantomData<fn() -> P>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type implements the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: two types coming from two different versions of the same crate are different types \u001b[0m\u001b[0m\u001b[1m\u001b[35meven if they look the same\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `fflonk::pcs::kzg::KZG<Bls12<ark_bls12_381::Config>>` to implement `PCS<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_ed_on_bls12_381_bandersnatch::FqConfig, 4>, 4>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 94 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 94 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0107, E0277, E0308, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0107, E0277, E0308, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0107`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0107`.\u001b[0m\n"}
